{"title":"CASL Vue","categories":["package"],"order":125,"meta":{"keywords":null,"description":null},"content":"<h1 id=\"casl-vue\"><a name=\"casl-vue\" class=\"h-link\" href=\"#\"></a>CASL Vue</h1>\n<p><a href=\"https://badge.fury.io/js/%40casl%2Fvue\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badge.fury.io/js/%40casl%2Fvue.svg\" alt=\"@casl/vue NPM version\"></a>\n<a href=\"https://www.npmjs.com/package/%40casl%2Fvue\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/npm/dm/%40casl%2Fvue.svg\" alt=\"\"></a>\n<a href=\"https://github.com/stalniy/casl/discussions\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/badge/Support-github%20discussions-green?style=flat&amp;link=https://github.com/stalniy/casl/discussions\" alt=\"Support\"></a></p>\n<p>This package allows to integrate <code>@casl/ability</code> with <a href=\"https://v3.vuejs.org/guide/introduction.html\" target=\"_blank\" rel=\"noopener nofollow\">Vue 3</a> application. So, you can show or hide UI elements based on user ability to see them.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"h-link\" href=\"#\"></a>Installation</h2>\n<p><strong>For Vue 2.x</strong>:</p>\n<pre><code class=\"hljs language-sh\">npm install @casl/vue@1.x @casl/ability\n<span class=\"hljs-comment\"># or</span>\nyarn add @casl/vue@1.x @casl/ability\n<span class=\"hljs-comment\"># or</span>\npnpm add @casl/vue@1.x @casl/ability\n</code></pre>\n<p><strong>For Vue 3.x</strong>:</p>\n<pre><code class=\"hljs language-sh\">npm install @casl/vue @casl/ability\n<span class=\"hljs-comment\"># or</span>\nyarn add @casl/vue @casl/ability\n<span class=\"hljs-comment\"># or</span>\npnpm add @casl/vue @casl/ability\n</code></pre>\n<h2 id=\"getting-started\"><a name=\"getting-started\" class=\"h-link\" href=\"#\"></a>Getting started</h2>\n<p>This package provides a Vue plugin, several hooks for new <a href=\"https://v3.vuejs.org/guide/composition-api-introduction.html\" target=\"_blank\" rel=\"noopener nofollow\">Vue Composition API</a> and <code>Can</code> component.</p>\n<h3 id=\"the-plugin\"><a name=\"the-plugin\" class=\"h-link\" href=\"#\"></a>The plugin</h3>\n<p>The plugin provides reactive <code>Ability</code> instance and optionally defines <code>$ability</code> and <code>$can</code> global properties, in the same way as it was for Vue 2.x. The only difference with the previous version is that it requires <code>Ability</code> instance to be passed as a mandatory argument:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { abilitiesPlugin } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/ability&#x27;</span>;\n\ncreateApp()\n  .use(abilitiesPlugin, ability, {\n    <span class=\"hljs-attr\">useGlobalProperties</span>: <span class=\"hljs-literal\">true</span>\n  })\n  .mount(<span class=\"hljs-string\">&#x27;#app&#x27;</span>);\n</code></pre>\n<p>Later, we can use either <code>$ability</code> or <code>$can</code> method in any component:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;$can(&#x27;create&#x27;, &#x27;Post&#x27;)&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;createPost&quot;</span>&gt;</span>Add Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<p><code>globalProperties</code> is the same concept as global variables which may make life a bit more complicated because any component has access to them (i.e., implicit dependency) and we need to ensure they don't introduce name collisions by prefixing them. So, instead of exposing <code>$ability</code> and <code>$can</code> as globals, we can use <a href=\"https://v3.vuejs.org/guide/component-provide-inject.html\" target=\"_blank\" rel=\"noopener nofollow\">provide/inject API</a> to inject <code>$ability</code>:</p>\n<pre><code class=\"hljs language-js\">createApp()\n  .use(abilitiesPlugin, ability)\n  .mount(<span class=\"hljs-string\">&#x27;#app&#x27;</span>);\n</code></pre>\n<p>And to inject an <code>Ability</code> instance in a component, we can use <code>ABILITY_TOKEN</code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;$ability.can(&#x27;create&#x27;, &#x27;Post&#x27;)&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;createPost&quot;</span>&gt;</span>Add Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { ABILITY_TOKEN } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">inject</span>: {\n    <span class=\"hljs-attr\">$ability</span>: { <span class=\"hljs-attr\">from</span>: ABILITY_TOKEN }\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>This is a bit more verbose but allows us to be explicit. This works especially good with new <a href=\"https://v3.vuejs.org/guide/composition-api-introduction.html\" target=\"_blank\" rel=\"noopener nofollow\">Composition API</a>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">&quot;can(&#x27;create&#x27;, &#x27;Post&#x27;)&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;createPost&quot;</span>&gt;</span>Add Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { useAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-comment\">// some code</span>\n    <span class=\"hljs-keyword\">const</span> { can } = useAbility();\n\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-comment\">// other props</span>\n      can\n    };\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h3 id=\"provide-ability-hook\"><a name=\"provide-ability-hook\" class=\"h-link\" href=\"#\"></a>provideAbility hook</h3>\n<p>Very rarely, we may need to provide a different <code>Ability</code> instance for a sub-tree of components, and to do this we can use <code>provideAbility</code> hook:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!-- a template --&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { provideAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> myCustomAbility = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n      <span class=\"hljs-comment\">// ...</span>\n    });\n\n    provideAbility(myCustomAbility)\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/guide/intro\" target=\"_blank\" rel=\"noopener nofollow\">CASL guide</a> to learn how to define <code>Ability</code> instance.</p>\n</blockquote>\n<h3 id=\"can-component\"><a name=\"can-component\" class=\"h-link\" href=\"#\"></a>Can component</h3>\n<p>There is an alternative way we can check permissions in the app, by using <code>Can</code> component. <code>Can</code> component is not registered by the plugin, so we can decide whether we want to use component or <code>v-if</code> + <code>$can</code> method. Also, this helps tree shaking to remove it if we decide to not use it.</p>\n<p>To register component globally, we can use global API (we can also register component locally in components that use it):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { Can, abilitiesPlugin } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n\ncreateApp()\n  .use(abilitiesPlugin, ability)\n  .component(Can.name, Can) <span class=\"hljs-comment\">// component registration</span>\n  .mount(<span class=\"hljs-string\">&#x27;#app&#x27;</span>);\n</code></pre>\n<p>And this is how we can use it:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;create&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;createPost&quot;</span>&gt;</span>Add Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<p>It accepts default slot and 5 properties:</p>\n<ul>\n<li>\n<p><code>do</code> - name of the action (e.g., <code>read</code>, <code>update</code>). Has an alias <code>I</code></p>\n</li>\n<li>\n<p><code>on</code> - checked subject. Has <code>a</code>, <code>an</code>, <code>this</code> aliases</p>\n</li>\n<li>\n<p><code>field</code> - checked field</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">:this</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">field</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span>\n    Yes, you can do this! ;)\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p><code>not</code> - inverts ability check and show UI if user cannot do some action:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">not</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;create&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span>&gt;</span>\n    You are not allowed to create a post\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p><code>passThrough</code> - renders children in spite of what <code>ability.can</code> returns. This is useful for creating custom components based on <code>Can</code>. For example, if you need to disable button based on user permissions:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;delete&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span> <span class=\"hljs-attr\">passThrough</span> <span class=\"hljs-attr\">v-slot</span>=<span class=\"hljs-string\">&quot;{ allowed }&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">:disabled</span>=<span class=\"hljs-string\">&quot;!allowed&quot;</span>&gt;</span>Delete post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n</li>\n</ul>\n<h4 id=\"property-names-and-aliases\"><a name=\"property-names-and-aliases\" class=\"h-link\" href=\"#\"></a>Property names and aliases</h4>\n<p>As you can see from the code above, the component name and its property names and values create an English sentence, actually a question. The example above reads as &quot;Can I delete a Post?&quot;.</p>\n<p>There are several other property aliases which allow constructing a readable question. And here is a guidance to help you do this:</p>\n<ul>\n<li>\n<p>use the <code>a</code> (or <code>an</code>) alias when you check by Type</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p>use <code>this</code> alias when you check action on a particular instance. So, the question can be read as &quot;Can I read this <em>particular</em> post?&quot;</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">:this</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n</code></pre>\n</li>\n<li>\n<p>use <code>do</code> and <code>on</code> if you are bored and don't want to make your code more readable :)</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">do</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">:on</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">do</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">:on</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">field</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span>\n</code></pre>\n</li>\n</ul>\n<h4 id=\"component-vs-reactive-ability\"><a name=\"component-vs-reactive-ability\" class=\"h-link\" href=\"#\"></a>Component vs reactive Ability</h4>\n<p>Let's consider PROS and CONS of both solutions in order to make the decision.</p>\n<p><strong>Can Component</strong>:</p>\n<p><strong>PROS</strong>:</p>\n<ul>\n<li>declarative</li>\n<li>can cache permissions check results until props or ability changes (currently does not)</li>\n</ul>\n<p><strong>CONS</strong>:</p>\n<ul>\n<li>more expensive to create</li>\n<li>adds nesting in template</li>\n<li>harder to use in complex boolean expressions</li>\n<li>harder to pass permission check as a prop to another component</li>\n</ul>\n<p><strong>Reactive Ability</strong>:</p>\n<p><strong>PROS</strong>:</p>\n<ul>\n<li>easy to use</li>\n<li>declarative in template with <code>v-if</code></li>\n<li>easy to pass as a prop to another component</li>\n<li>easy to use in complex boolean expressions (either in js or in template)</li>\n</ul>\n<p><strong>CONS</strong>:</p>\n<ul>\n<li>more expensive to check, conditions are re-evaluated on each re-render</li>\n</ul>\n<p>Despite the fact that reactive ability check is a bit more expensive, they are still very fast and it's recommended to use reactive ability instead of <code>&lt;Can&gt;</code> component.</p>\n<h2 id=\"type-script-support\"><a name=\"type-script-support\" class=\"h-link\" href=\"#\"></a>TypeScript support</h2>\n<p>The package is written in TypeScript, so don't worry that you need to keep all the properties and aliases in mind. If you use TypeScript, your IDE will suggest you the correct usage and TypeScript will warn you if you make a mistake.</p>\n<p>There are few ways to use TypeScript in a Vue app, depending on your preferences. But let's first define our <code>AppAbility</code> type:</p>\n<pre><code data-filename=\"AppAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, AbilityClass } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> Actions = <span class=\"hljs-string\">&#x27;create&#x27;</span> | <span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span> | <span class=\"hljs-string\">&#x27;delete&#x27;</span>;\n<span class=\"hljs-keyword\">type</span> Subjects = <span class=\"hljs-string\">&#x27;Article&#x27;</span> | <span class=\"hljs-string\">&#x27;User&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> AppAbility = Ability&lt;[Actions, Subjects]&gt;;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> AppAbility = Ability <span class=\"hljs-keyword\">as</span> AbilityClass&lt;AppAbility&gt;;\n</code></pre>\n<h3 id=\"augment-vue-types\"><a name=\"augment-vue-types\" class=\"h-link\" href=\"#\"></a>Augment Vue types</h3>\n<p>There is no other way for TypeScript to know types of global properties without augmentation. To do this, let's add <code>src/shims-ability.d.ts</code> file with the next content:</p>\n<pre><code data-filename=\"shims-ability.d.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { AppAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./AppAbility&#x27;</span>\n\n<span class=\"hljs-keyword\">declare</span> <span class=\"hljs-built_in\">module</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span> {\n  <span class=\"hljs-keyword\">interface</span> ComponentCustomProperties {\n    <span class=\"hljs-attr\">$ability</span>: AppAbility;\n    $can(<span class=\"hljs-built_in\">this</span>: <span class=\"hljs-built_in\">this</span>, ...args: Parameters&lt;<span class=\"hljs-built_in\">this</span>[<span class=\"hljs-string\">&#x27;$ability&#x27;</span>][<span class=\"hljs-string\">&#x27;can&#x27;</span>]&gt;): <span class=\"hljs-built_in\">boolean</span>;\n  }\n}\n</code></pre>\n<h3 id=\"composition-api\"><a name=\"composition-api\" class=\"h-link\" href=\"#\"></a>Composition API</h3>\n<p>With composition API, we don't need to augment Vue types and can use <code>useAbility</code> hook:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { useAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AppAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./AppAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">setup</span>(<span class=\"hljs-params\">props</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> { can } = useAbility&lt;AppAbility&gt;();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>) ? <span class=\"hljs-string\">&#x27;Yes&#x27;</span> : <span class=\"hljs-string\">&#x27;No&#x27;</span>;\n  }\n}\n</code></pre>\n<p>Additionally, we can create a separate <code>useAppAbility</code> hook, so we don't need to import <code>useAbility</code> and <code>AppAbility</code> in every component we want to check permissions but instead just import a single hook:</p>\n<pre><code data-filename=\"hooks/useAppAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { useAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AppAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../AppAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> useAppAbility = <span class=\"hljs-function\">() =&gt;</span> useAbility&lt;AppAbility&gt;();\n</code></pre>\n<h3 id=\"options-api\"><a name=\"options-api\" class=\"h-link\" href=\"#\"></a>Options API</h3>\n<p>It's also possible to use <code>@casl/vue</code> and TypeScript with options API. By default, <code>ABILITY_TOKEN</code> is typed as <code>InjectionKey&lt;Ability&gt;</code>, to cast it to <code>InjectionKey&lt;AppAbility&gt;</code>, we need to use a separate variable:</p>\n<pre><code data-filename=\"AppAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { InjectionKey } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { ABILITY_TOKEN } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n\n<span class=\"hljs-comment\">// previous content that defines `AppAbility`</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> TOKEN = ABILITY_TOKEN <span class=\"hljs-keyword\">as</span> InjectionKey&lt;AppAbility&gt;;\n</code></pre>\n<p>and now, when we inject <code>AppAbility</code> instance, we will have the correct types:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;ts&quot;</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { defineComponent } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { TOKEN } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./AppAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineComponent({\n  <span class=\"hljs-attr\">inject</span>: {\n    <span class=\"hljs-attr\">ability</span>: { <span class=\"hljs-attr\">from</span>: TOKEN }\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">created</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.ability <span class=\"hljs-comment\">// AppAbility</span>\n  }\n});\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>Read <a href=\"https://v3.vuejs.org/guide/typescript-support.html\" target=\"_blank\" rel=\"noopener nofollow\">Vue TypeScript</a> for more details.</p>\n</blockquote>\n<h2 id=\"update-ability-instance\"><a name=\"update-ability-instance\" class=\"h-link\" href=\"#\"></a>Update Ability instance</h2>\n<p>Majority of applications that need permission checking support have something like <code>AuthService</code> or <code>LoginService</code> or <code>Session</code> service (name it as you wish) which is responsible for user login/logout functionality. Whenever user login (and logout), we need to update <code>Ability</code> instance with new rules. Usually you will do this in your <code>LoginComponent</code>.</p>\n<p>Let's imagine that server returns user with a role on login:</p>\n<pre><code data-filename=\"Login.vue\" class=\"language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> @<span class=\"hljs-attr\">submit.prevent</span>=<span class=\"hljs-string\">&quot;login&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;email&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;password&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>&gt;</span>Login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> { AbilityBuilder, Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { ABILITY_TOKEN } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/vue&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;LoginForm&#x27;</span>,\n  <span class=\"hljs-attr\">inject</span>: {\n    <span class=\"hljs-attr\">$ability</span>: { <span class=\"hljs-attr\">from</span>: ABILITY_TOKEN }\n  },\n  <span class=\"hljs-attr\">data</span>: <span class=\"hljs-function\">() =&gt;</span> ({\n    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>,\n    <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>\n  }),\n  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">login</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">const</span> { email, password } = <span class=\"hljs-built_in\">this</span>;\n      <span class=\"hljs-keyword\">const</span> params = { <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>, <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ email, password }) };\n\n      <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">&#x27;path/to/api/login&#x27;</span>, params)\n        .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())\n        .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ user }</span>) =&gt;</span> <span class=\"hljs-built_in\">this</span>.updateAbility(user));\n    },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">updateAbility</span>(<span class=\"hljs-params\">user</span>)</span> {\n      <span class=\"hljs-keyword\">const</span> { can, rules } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(Ability);\n\n      <span class=\"hljs-keyword\">if</span> (user.role === <span class=\"hljs-string\">&#x27;admin&#x27;</span>) {\n        can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n      }\n\n      <span class=\"hljs-built_in\">this</span>.$ability.update(rules);\n    }\n  }\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/guide/define-rules\" target=\"_blank\" rel=\"noopener nofollow\">Define rules</a> to get more information of how to define <code>Ability</code></p>\n</blockquote>\n<h2 id=\"want-to-help\"><a name=\"want-to-help\" class=\"h-link\" href=\"#\"></a>Want to help?</h2>\n<p>Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on guidelines for <a href=\"https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener nofollow\">contributing</a>.</p>\n<p>If you'd like to help us sustain our community and project, consider <a href=\"https://opencollective.com/casljs/contribute\" target=\"_blank\" rel=\"noopener nofollow\">to become a financial contributor on Open Collective</a></p>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/support-casljs\" target=\"_blank\" rel=\"noopener nofollow\">Support CASL</a> for details</p>\n</blockquote>\n<h2 id=\"license\"><a name=\"license\" class=\"h-link\" href=\"#\"></a>License</h2>\n<p><a href=\"http://www.opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener nofollow\">MIT License</a></p>","headings":[{"id":"casl-vue","title":"CASL Vue"},{"id":"installation","title":"Installation"},{"id":"getting-started","title":"Getting started"},{"id":"the-plugin","title":"The plugin"},{"id":"provide-ability-hook","title":"provideAbility hook"},{"id":"can-component","title":"Can component"},{"id":"property-names-and-aliases","title":"Property names and aliases"},{"id":"component-vs-reactive-ability","title":"Component vs reactive Ability"},{"id":"type-script-support","title":"TypeScript support"},{"id":"augment-vue-types","title":"Augment Vue types"},{"id":"composition-api","title":"Composition API"},{"id":"options-api","title":"Options API"},{"id":"update-ability-instance","title":"Update Ability instance"},{"id":"want-to-help","title":"Want to help?"},{"id":"license","title":"License"}],"id":"package/casl-vue"}