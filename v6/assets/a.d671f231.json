{"title":"CASL React","categories":["package"],"order":120,"meta":{"keywords":null,"description":null},"content":"<h1 id=\"casl-react\"><a name=\"casl-react\" class=\"h-link\" href=\"#\"></a>CASL React</h1>\n<p><a href=\"https://badge.fury.io/js/%40casl%2Freact\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badge.fury.io/js/%40casl%2Freact.svg\" alt=\"@casl/react NPM version\"></a>\n<a href=\"https://www.npmjs.com/package/%40casl%2Freact\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/npm/dm/%40casl%2Freact.svg\" alt=\"\"></a>\n<a href=\"https://gitter.im/stalniy-casl/casl\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"CASL Join the chat\"></a></p>\n<p>This package allows to integrate <code>@casl/ability</code> with <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener nofollow\">React</a> application. It provides <code>Can</code> component that allow to hide or show UI elements based on user ability to see them.</p>\n<blockquote>\n<p><code>@casl/react</code> perfectly works with <a href=\"https://reactnative.dev/\" target=\"_blank\" rel=\"noopener nofollow\">React Native</a></p>\n</blockquote>\n<h2 id=\"installation\"><a name=\"installation\" class=\"h-link\" href=\"#\"></a>Installation</h2>\n<pre><code class=\"hljs language-sh\">npm install @casl/react @casl/ability\n<span class=\"hljs-comment\"># or</span>\nyarn add @casl/react @casl/ability\n<span class=\"hljs-comment\"># or</span>\npnpm add @casl/react @casl/ability\n</code></pre>\n<h2 id=\"can-component\"><a name=\"can-component\" class=\"h-link\" href=\"#\"></a>Can component</h2>\n<p>It accepts children and 6 properties:</p>\n<ul>\n<li>\n<p><code>do</code> - name of the action (e.g., <code>read</code>, <code>update</code>). Has an alias <code>I</code></p>\n</li>\n<li>\n<p><code>on</code> - checked subject. Has <code>a</code>, <code>an</code>, <code>this</code> aliases</p>\n</li>\n<li>\n<p><code>field</code> - checked field</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ({ post }) =&gt; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">this</span>=<span class=\"hljs-string\">{post}</span> <span class=\"hljs-attr\">field</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span>\n  Yes, you can do this! ;)\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span></span>\n</code></pre>\n</li>\n<li>\n<p><code>not</code> - inverts ability check and show UI if user cannot do some action:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">not</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;create&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span>&gt;</span>\n  You are not allowed to create a post\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span></span>\n</code></pre>\n</li>\n<li>\n<p><code>passThrough</code> - renders children in spite of what <code>ability.can</code> returns. This is useful for creating custom components based on <code>Can</code>. For example, if you need to disable button based on user permissions:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; (\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;create&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span> <span class=\"hljs-attr\">passThrough</span>&gt;</span>\n    {allowed =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{!allowed}</span>&gt;</span>Save<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span></span>\n)\n</code></pre>\n</li>\n<li>\n<p><code>ability</code> - an instance of <code>Ability</code> which will be used to check permissions</p>\n</li>\n<li>\n<p><code>children</code> - elements to hide or render. May be either a render function:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;create&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span> <span class=\"hljs-attr\">ability</span>=<span class=\"hljs-string\">{ability}</span>&gt;</span>\n  {() =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.createPost}</span>&gt;</span>Create Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span></span>\n</code></pre>\n<p>or React elements:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;create&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span> <span class=\"hljs-attr\">ability</span>=<span class=\"hljs-string\">{ability}</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.createPost}</span>&gt;</span>Create Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span></span>\n</code></pre>\n</li>\n</ul>\n<blockquote>\n<p>it's better to pass children as a render function because it will not create additional React elements if user doesn't have ability to do some action (in the case above <code>create Post</code>)</p>\n</blockquote>\n<p>Don't be scared by the amount of properties component takes, we will talk about how to bind some of them.</p>\n<h3 id=\"bind-can-to-a-particular-ability-instance\"><a name=\"bind-can-to-a-particular-ability-instance\" class=\"h-link\" href=\"#\"></a>Bind Can to a particular Ability instance</h3>\n<p>It'd be inconvenient to pass <code>ability</code> in every <code>Can</code> component. That's why there are 2 function which allow to bind <code>Can</code> to use a particular instance of <code>Ability</code>:</p>\n<ul>\n<li>\n<p><code>createCanBoundTo</code><br>\nThis function was created to support version of React &lt; 16.4.0, those versions doesn't have <a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener nofollow\">Context API</a>. Can be used like this:</p>\n<pre><code data-filename=\"Can.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> { createCanBoundTo } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> Can = createCanBoundTo(ability);\n</code></pre>\n</li>\n<li>\n<p><code>createContextualCan</code><br>\nThis function is created to support <a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener nofollow\">React's Context API</a> and can be used like this:</p>\n<pre><code data-filename=\"Can.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> { createContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { createContextualCan } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/react&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> AbilityContext = createContext();\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> Can = createContextualCan(AbilityContext.Consumer);\n</code></pre>\n</li>\n</ul>\n<p>The 2 methods are almost the same, the 2nd one is slightly better because it will allow you to provide different <code>Ability</code> instances to different parts of your app and inject ability using <a href=\"https://reactjs.org/docs/context.html#classcontexttype\" target=\"_blank\" rel=\"noopener nofollow\"><code>contextType</code> static property</a>. Choose your way based on the version of React you use.</p>\n<blockquote>\n<p>In this guide, we will use <code>createContextualCan</code> as it covers more cases in modern React development.</p>\n</blockquote>\n<p>To finalize things, we need to provide an instance of <code>Ability</code> via <code>AbilityContext.Provider</code>:</p>\n<pre><code data-filename=\"App.jsx\" class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> { AbilityContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Can&#x27;</span>\n<span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./ability&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\">{ props }</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AbilityContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{ability}</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TodoApp</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">AbilityContext.Provider</span>&gt;</span></span>\n  )\n}\n</code></pre>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v6/en/guide/intro\" target=\"_blank\" rel=\"noopener nofollow\">CASL guide</a> to learn how to define <code>Ability</code> instance.</p>\n</blockquote>\n<p>and use our <code>Can</code> component:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { Can } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Can&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  createTodo = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// implement logic to show new todo form</span>\n  };\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;create&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Todo&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.createTodo}</span>&gt;</span>Create Todo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span></span>\n    )\n  }\n}\n</code></pre>\n<h3 id=\"imperative-access-to-ability-instance\"><a name=\"imperative-access-to-ability-instance\" class=\"h-link\" href=\"#\"></a>Imperative access to Ability instance</h3>\n<p>Sometimes the logic in a component may be a bit complicated, so you can't use <code>&lt;Can&gt;</code> component. In such cases, you can use <a href=\"https://reactjs.org/docs/context.html#classcontexttype\" target=\"_blank\" rel=\"noopener nofollow\">React's <code>contextType</code> component property</a>:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n<span class=\"hljs-keyword\">import</span> { AbilityContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Can&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoApp</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  createTodo = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// logic to show new todo form</span>\n  };\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        {this.context.can(&#x27;create&#x27;, &#x27;Todo&#x27;) &amp;&amp;\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.createTodo}</span>&gt;</span>Create Todo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    );\n  }\n}\n\nTodoApp.contextType = AbilityContext;\n</code></pre>\n<p>or <code>useContext</code> hook:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> React, { useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AbilityContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Can&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> createTodo = <span class=\"hljs-function\">() =&gt;</span> { <span class=\"hljs-comment\">/* logic to show new todo form */</span> };\n  <span class=\"hljs-keyword\">const</span> ability = useContext(AbilityContext);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      {ability.can(&#x27;create&#x27;, &#x27;Todo&#x27;) &amp;&amp;\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{createTodo}</span>&gt;</span>Create Todo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<p>In that case, you need to create a new <code>Ability</code> instance when you want to update user permissions (don't use <code>update</code> method, it won't trigger re-rendering in this case) or you need to force re-render the whole app.</p>\n<p>To make things easier, <code>@casl/react</code> provides <code>useAbility</code> hook that accepts <code>React.Context</code> as the only argument (the same as <code>useContext</code>), but triggers re-render in the component where you use this hook when you update <code>Ability</code> rules. The example above can be rewritten to:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { useAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AbilityContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Can&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> createTodo = <span class=\"hljs-function\">() =&gt;</span> { <span class=\"hljs-comment\">/* logic to show new todo form */</span> };\n  <span class=\"hljs-keyword\">const</span> ability = useAbility(AbilityContext);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      {ability.can(&#x27;create&#x27;, &#x27;Todo&#x27;) &amp;&amp;\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{createTodo}</span>&gt;</span>Create Todo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<h3 id=\"usage-note-on-react-16-4-with-type-script\"><a name=\"usage-note-on-react-16-4-with-type-script\" class=\"h-link\" href=\"#\"></a>Usage note on React &lt; 16.4 with TypeScript</h3>\n<p>If you use TypeScript and React &lt; 16.4 make sure to create a file <code>contextAPIPatch.d.ts</code> file with the next content:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-built_in\">module</span> <span class=\"hljs-string\">&#x27;react&#x27;</span> {\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> Consumer&lt;T&gt; = <span class=\"hljs-built_in\">any</span>;\n}\n</code></pre>\n<p>and include it in your <code>tscofig.json</code>, otherwise your app won't compile:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-comment\">// other configuration options</span>\n  <span class=\"hljs-attr\">&quot;include&quot;</span>: [\n    <span class=\"hljs-string\">&quot;src/**/*&quot;</span>,\n    <span class=\"hljs-string\">&quot;./contextAPIPatch.d.ts&quot;</span> <span class=\"hljs-comment\">// &lt;-- add this line</span>\n  ]\n}\n</code></pre>\n<h3 id=\"property-names-and-aliases\"><a name=\"property-names-and-aliases\" class=\"h-link\" href=\"#\"></a>Property names and aliases</h3>\n<p>As you can see from the code above, component name and its property names and values create an English sentence, actually a question. For example, the code below reads as <code>Can I create a Post</code>:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;create&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{...}</span>&gt;</span>Create Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span></span>\n</code></pre>\n<p>There are several other property aliases which allow to construct a readable question:</p>\n<ul>\n<li>\n<p>use <code>a</code> (or <code>an</code>) alias when you check by Type</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">a</span>=<span class=\"hljs-string\">&quot;Post&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span></span>\n</code></pre>\n</li>\n<li>\n<p>use <code>this</code> alias instead of <code>a</code> when you check action on a particular instance. So, the question can be read as &quot;Can I read this <em>particular</em> post?&quot;</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// `this.props.post` is an instance of `Post` class (i.e., model instance)</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">I</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">this</span>=<span class=\"hljs-string\">{this.props.post}</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span></span>\n</code></pre>\n</li>\n<li>\n<p>use <code>do</code> and <code>on</code> if you are bored and don't want to make your code more readable ;)</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// `this.props.post` is an instance of `Post` class (i.e., model instance)</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">do</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">on</span>=<span class=\"hljs-string\">{this.props.post}</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span></span>\n\n<span class=\"hljs-comment\">// or per field check</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Can</span> <span class=\"hljs-attr\">do</span>=<span class=\"hljs-string\">&quot;read&quot;</span> <span class=\"hljs-attr\">on</span>=<span class=\"hljs-string\">{this.props.post}</span> <span class=\"hljs-attr\">field</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Can</span>&gt;</span></span>\n</code></pre>\n</li>\n</ul>\n<h2 id=\"type-script-support\"><a name=\"type-script-support\" class=\"h-link\" href=\"#\"></a>TypeScript support</h2>\n<p>The package is written in TypeScript, so don't worry that you need to keep all the properties and aliases in mind. If you use TypeScript, your IDE will suggest you the correct usage and TypeScript will warn you if you make a mistake.</p>\n<h2 id=\"update-ability-instance\"><a name=\"update-ability-instance\" class=\"h-link\" href=\"#\"></a>Update Ability instance</h2>\n<p>Majority of applications that need permission checking support have something like <code>AuthService</code> or <code>LoginService</code> or <code>Session</code> service (name it as you wish) which is responsible for user login/logout functionality. Whenever user login (and logout), we need to update <code>Ability</code> instance with new rules. Usually you will do this in your <code>LoginComponent</code>.</p>\n<p>Let's imagine that server returns user with a role on login:</p>\n<pre><code data-filename=\"Login.jsx\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder, Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> React, { useState, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AbilityContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./Can&#x27;</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateAbility</span>(<span class=\"hljs-params\">ability, user</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { can, rules } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(Ability);\n\n  <span class=\"hljs-keyword\">if</span> (user.role === <span class=\"hljs-string\">&#x27;admin&#x27;</span>) {\n    can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n  }\n\n  ability.update(rules);\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> [username, setUsername] = useState(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [password, setPassword] = useState(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> ability = useContext(AbilityContext);\n  <span class=\"hljs-keyword\">const</span> login = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> params = {\n      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,\n      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ username, password })\n    };\n    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">&#x27;path/to/api/login&#x27;</span>, params)\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ user }</span>) =&gt;</span> updateAbility(ability, user));\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>&gt;</span>\n      {/* input fields */}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{login}</span>&gt;</span>Login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v6/en/guide/define-rules\" target=\"_blank\" rel=\"noopener nofollow\">Define rules</a> to get more information of how to define <code>Ability</code></p>\n</blockquote>\n<h2 id=\"use-ability-usage-within-hooks\"><a name=\"use-ability-usage-within-hooks\" class=\"h-link\" href=\"#\"></a><code>useAbility</code> usage within hooks</h2>\n<p>Using the return value <code>ability</code> of <code>const ability = useAbility(AbilityContext)</code> within a hook dependencies won't trigger a rerender when the rules are updated. You have to specify <code>ability.rules</code>:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> posts = React.useMemo(<span class=\"hljs-function\">() =&gt;</span> getPosts(ability), [ability.rules]);\n<span class=\"hljs-comment\">// ✅ calling ability.update will update the list of posts</span>\n</code></pre>\n<h2 id=\"want-to-help\"><a name=\"want-to-help\" class=\"h-link\" href=\"#\"></a>Want to help?</h2>\n<p>Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on guidelines for <a href=\"https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener nofollow\">contributing</a>.</p>\n<p>If you'd like to help us sustain our community and project, consider <a href=\"https://opencollective.com/casljs/contribute\" target=\"_blank\" rel=\"noopener nofollow\">to become a financial contributor on Open Collective</a></p>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v6/en/support-casljs\" target=\"_blank\" rel=\"noopener nofollow\">Support CASL</a> for details</p>\n</blockquote>\n<h2 id=\"license\"><a name=\"license\" class=\"h-link\" href=\"#\"></a>License</h2>\n<p><a href=\"http://www.opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener nofollow\">MIT License</a></p>","headings":[{"id":"casl-react","title":"CASL React"},{"id":"installation","title":"Installation"},{"id":"can-component","title":"Can component"},{"id":"bind-can-to-a-particular-ability-instance","title":"Bind Can to a particular Ability instance"},{"id":"imperative-access-to-ability-instance","title":"Imperative access to Ability instance"},{"id":"usage-note-on-react-16-4-with-type-script","title":"Usage note on React &lt; 16.4 with TypeScript"},{"id":"property-names-and-aliases","title":"Property names and aliases"},{"id":"type-script-support","title":"TypeScript support"},{"id":"update-ability-instance","title":"Update Ability instance"},{"id":"use-ability-usage-within-hooks","title":"useAbility  usage within hooks"},{"id":"want-to-help","title":"Want to help?"},{"id":"license","title":"License"}],"id":"package/casl-react"}