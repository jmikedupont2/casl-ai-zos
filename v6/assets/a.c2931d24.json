{"title":"CASL Prisma","categories":["package"],"order":105,"meta":{"keywords":"prisma authorization, permission management, casl","description":"Prisma authorization using CASL permission management library. Test permissions in runtime and get accessible record using Prisma Where conditions\n"},"content":"<h1 id=\"casl-prisma\"><a name=\"casl-prisma\" class=\"h-link\" href=\"#\"></a>CASL Prisma</h1>\n<p><a href=\"https://badge.fury.io/js/%40casl%2Fprisma\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badge.fury.io/js/%40casl%2Fprisma.svg\" alt=\"@casl/prisma NPM version\"></a>\n<a href=\"https://www.npmjs.com/package/%40casl%2Fprisma\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/npm/dm/%40casl%2Fprisma.svg\" alt=\"\"></a>\n<a href=\"https://github.com/stalniy/casl/discussions\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/badge/Support-github%20discussions-green?style=flat&amp;link=https://github.com/stalniy/casl/discussions\" alt=\"Support\"></a></p>\n<p>This package allows to define <a href=\"https://github.com/stalniy/casl\" target=\"_blank\" rel=\"noopener nofollow\">CASL</a> permissions on <a href=\"https://prisma.io/\" target=\"_blank\" rel=\"noopener nofollow\">Prisma</a> models using Prisma <code>WhereInput</code>. And that brings a lot of power in terms of permission management in SQL world:</p>\n<ol>\n<li>We can use Prisma Query to define permissions, no need to learn MongoDB query language anymore.</li>\n<li>Additionally, we can ask our SQL database questions like: &quot;Which records can be read?&quot; or &quot;Which records can be updated?&quot;.</li>\n</ol>\n<h2 id=\"installation\"><a name=\"installation\" class=\"h-link\" href=\"#\"></a>Installation</h2>\n<pre><code class=\"hljs language-sh\">npm install @casl/prisma @casl/ability\n<span class=\"hljs-comment\"># or</span>\nyarn add @casl/prisma @casl/ability\n<span class=\"hljs-comment\"># or</span>\npnpm add @casl/prisma @casl/ability\n</code></pre>\n<h2 id=\"usage\"><a name=\"usage\" class=\"h-link\" href=\"#\"></a>Usage</h2>\n<p>This package is a bit different from all others because it provides a custom <code>createPrismaAbility</code> factory function that is configured to check permissions using Prisma <a href=\"https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#where\" target=\"_blank\" rel=\"noopener nofollow\">WhereInput</a>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { User, Post, Prisma } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@prisma/client&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { PureAbility, AbilityBuilder, subject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { createPrismaAbility, PrismaQuery, Subjects } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/prisma&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> AppAbility = PureAbility&lt;[<span class=\"hljs-built_in\">string</span>, Subjects&lt;{\n  <span class=\"hljs-attr\">User</span>: User,\n  <span class=\"hljs-attr\">Post</span>: Post\n}&gt;], PrismaQuery&gt;;\n<span class=\"hljs-keyword\">const</span> { can, cannot, build } = <span class=\"hljs-keyword\">new</span> AbilityBuilder&lt;AppAbility&gt;(createPrismaAbility);\n\ncan(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, { <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-number\">1</span> });\ncannot(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, { <span class=\"hljs-attr\">title</span>: { <span class=\"hljs-attr\">startsWith</span>: <span class=\"hljs-string\">&#x27;[WIP]:&#x27;</span> } });\n\n<span class=\"hljs-keyword\">const</span> ability = build();\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, subject(<span class=\"hljs-string\">&#x27;Post&#x27;</span>, { <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;...&#x27;</span>, <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-number\">1</span> })));\n</code></pre>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/guide/intro\" target=\"_blank\" rel=\"noopener nofollow\">CASL guide</a> to learn how to define abilities. Everything is the same except of conditions language.</p>\n</blockquote>\n<h3 id=\"note-on-subject-helper\"><a name=\"note-on-subject-helper\" class=\"h-link\" href=\"#\"></a>Note on subject helper</h3>\n<p>Because Prisma returns DTO objects without exposing any type information on it, we need to use <code>subject</code> helper to provide that type manually, so CASL can understand what rules to apply to passed in object.</p>\n<p>Unfortunately, there is no easy way to automate this, except of adding additional column to all models. For more details, check <a href=\"https://github.com/prisma/prisma/issues/5315\" target=\"_blank\" rel=\"noopener nofollow\">this issue</a>.</p>\n<blockquote>\n<p>To get more details about object type detection, please read <a href=\"https://casl.js.org/v5/en/guide/subject-type-detection\" target=\"_blank\" rel=\"noopener nofollow\">CASL Subject type detection</a></p>\n</blockquote>\n<h3 id=\"note-on-prisma-query-runtime-interpreter\"><a name=\"note-on-prisma-query-runtime-interpreter\" class=\"h-link\" href=\"#\"></a>Note on Prisma Query runtime interpreter</h3>\n<p><code>@casl/prisma</code> uses <a href=\"https://github.com/stalniy/ucast\" target=\"_blank\" rel=\"noopener nofollow\">ucast</a> to interpret Prisma <a href=\"https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#where\" target=\"_blank\" rel=\"noopener nofollow\">WhereInput</a> in JavaScript runtime. However, there are few caveats:</p>\n<ul>\n<li>equality of JSON columns is not implemented</li>\n<li>equality of array/list columns is not implemented (however operators like <code>has</code>, <code>hasSome</code> and <code>hasEvery</code> should be more than enough)</li>\n<li>when defining conditions on relation, always specify one of operators (<code>every</code>, <code>none</code>, <code>some</code>, <code>is</code> or <code>isNot</code>)</li>\n</ul>\n<p>Interpreter throws a <code>ParsingQueryError</code> in cases it receives invalid parameters for query operators or if some operation is not supported.</p>\n<h2 id=\"finding-accessible-records\"><a name=\"finding-accessible-records\" class=\"h-link\" href=\"#\"></a>Finding Accessible Records</h2>\n<p>One nice feature of <a href=\"https://prisma.io/\" target=\"_blank\" rel=\"noopener nofollow\">Prisma</a> and <a href=\"https://github.com/stalniy/casl\" target=\"_blank\" rel=\"noopener nofollow\">CASL</a> integration is that we can get all records from the database our user has access to. To do this, just use <code>accessibleBy</code> helper function:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// ability is a PrismaAbility instance created in the example above</span>\n\n<span class=\"hljs-keyword\">const</span> accessiblePosts = <span class=\"hljs-keyword\">await</span> prisma.post.findMany({\n  <span class=\"hljs-attr\">where</span>: accessibleBy(ability).Post\n});\n</code></pre>\n<p>That function accepts <code>Ability</code> instance and <code>action</code> (defaults to <code>read</code>),  returns an object with keys that corresponds to Prisma model names and values being aggregated from permission rules <code>WhereInput</code> objects.</p>\n<p><strong>Important</strong>: in case user doesn't have ability to access any posts, <code>accessibleBy</code> throws <code>ForbiddenError</code>, so be ready to catch it!</p>\n<p>To combine this with business logic conditions, just use <code>AND</code>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> accessiblePosts = <span class=\"hljs-keyword\">await</span> prisma.post.findMany({\n  <span class=\"hljs-attr\">where</span>: {\n    <span class=\"hljs-attr\">AND</span>: [\n      accessibleBy(ability).Post,\n      { <span class=\"hljs-comment\">/* business related conditions */</span> }\n    ]\n  }\n})\n</code></pre>\n<h2 id=\"type-script-support\"><a name=\"type-script-support\" class=\"h-link\" href=\"#\"></a>TypeScript support</h2>\n<p>The package is written in TypeScript what provides comprehensive IDE hints and compile time validation.</p>\n<blockquote>\n<p>Makes sure to call <code>prisma generate</code>.  <code>@casl/prisma</code> uses Prisma generated types, so if client is not generated nothing will work.</p>\n</blockquote>\n<p>Additionally, there are several helpers that makes it easy to work with Prisma and CASL:</p>\n<h3 id=\"prisma-query\"><a name=\"prisma-query\" class=\"h-link\" href=\"#\"></a>PrismaQuery</h3>\n<p>It's a generic type that provides <code>Prisma.ModelWhereInput</code> in generic way. We need to pass inside a named model:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { User } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@prisma/client&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Model, PrismaQuery } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/prisma&#x27;</span>;\n\n<span class=\"hljs-comment\">// almost the same as Prisma.UserWhereInput except that it&#x27;s a higher order type</span>\n<span class=\"hljs-keyword\">type</span> UserWhereInput = PrismaQuery&lt;Model&lt;User, <span class=\"hljs-string\">&#x27;User&#x27;</span>&gt;&gt;;\n</code></pre>\n<h3 id=\"model\"><a name=\"model\" class=\"h-link\" href=\"#\"></a>Model</h3>\n<p>Just gives a name to a model. That name is stored using <code>ForcedSubject&lt;TName&gt;</code> helper from <code>@casl/ability</code>. To use a separate column or another strategy to name models, don't use this helper because it only works in combination with <code>subject</code> helper.</p>\n<h3 id=\"subjects\"><a name=\"subjects\" class=\"h-link\" href=\"#\"></a>Subjects</h3>\n<p>Creates a union of all possible subjects out of passed in object:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { User } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@prisma/client&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Subjects } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/prisma&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> AppSubjects = Subjects&lt;{\n  <span class=\"hljs-attr\">User</span>: User\n}&gt;; <span class=\"hljs-comment\">// &#x27;User&#x27; | Model&lt;User, &#x27;User&#x27;&gt;</span>\n</code></pre>\n<p>To support rule definition for <code>all</code>, we just need to explicitly do it:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> AppSubjects = <span class=\"hljs-string\">&#x27;all&#x27;</span> | Subjects&lt;{\n  <span class=\"hljs-attr\">User</span>: User\n}&gt;; <span class=\"hljs-comment\">// &#x27;User&#x27; | Model&lt;User, &#x27;User&#x27;&gt;</span>\n\n<span class=\"hljs-keyword\">type</span> AppAbility = PureAbility&lt;[<span class=\"hljs-built_in\">string</span>, AppSubjects], PrismaQuery&gt;;\n</code></pre>\n<h2 id=\"custom-prisma-client-output-path\"><a name=\"custom-prisma-client-output-path\" class=\"h-link\" href=\"#\"></a>Custom PrismaClient output path</h2>\n<p>Prisma allows <a href=\"https://www.prisma.io/docs/concepts/components/prisma-client/working-with-prismaclient/generating-prisma-client#using-a-custom-output-path\" target=\"_blank\" rel=\"noopener nofollow\">to generate client into a custom directory</a> in this case <code>@prisma/client</code> doesn't re-export needed types anymore and <code>@casl/prisma</code> cannot automatically detect and infer types. In this case, we need to provide required types manually. Let's assume that we have the next configuration:</p>\n<pre><code class=\"hljs language-prisma\">generator client {\n  provider = &quot;prisma-client-js&quot;\n  output   = &quot;../src/generated/client&quot;\n}\n</code></pre>\n<p>Then we need to create a custom file for casl-prisma integration:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// src/casl-prisma.ts</span>\n<span class=\"hljs-keyword\">import</span> {\n  createAbilityFactory,\n  createAccessibleByFactory,\n  prismaQuery,\n  ExtractModelName,\n  Model\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@casl/prisma/runtime&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { hkt } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@casl/ability&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">type</span> { Prisma, PrismaClient } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./generated/client&quot;</span>;\n\n<span class=\"hljs-keyword\">type</span> ModelName = Prisma.ModelName;\n<span class=\"hljs-keyword\">type</span> ModelWhereInput = {\n  [K <span class=\"hljs-keyword\">in</span> Prisma.ModelName]: Uncapitalize&lt;K&gt; <span class=\"hljs-keyword\">extends</span> keyof PrismaClient\n    ? Extract&lt;Parameters&lt;PrismaClient[Uncapitalize&lt;K&gt;][<span class=\"hljs-string\">&#x27;findFirst&#x27;</span>]&gt;[<span class=\"hljs-number\">0</span>], { where?: <span class=\"hljs-built_in\">any</span> }&gt;[<span class=\"hljs-string\">&quot;where&quot;</span>]\n    : <span class=\"hljs-built_in\">never</span>\n};\n\n<span class=\"hljs-keyword\">type</span> WhereInput&lt;TModelName <span class=\"hljs-keyword\">extends</span> Prisma.ModelName&gt; = Extract&lt;ModelWhereInput[TModelName], Record&lt;<span class=\"hljs-built_in\">any</span>, <span class=\"hljs-built_in\">any</span>&gt;&gt;;\n\n<span class=\"hljs-keyword\">interface</span> PrismaQueryTypeFactory <span class=\"hljs-keyword\">extends</span> hkt.GenericFactory {\n  <span class=\"hljs-attr\">produce</span>: WhereInput&lt;ExtractModelName&lt;<span class=\"hljs-built_in\">this</span>[<span class=\"hljs-number\">0</span>], ModelName&gt;&gt;\n}\n\n<span class=\"hljs-keyword\">type</span> PrismaModel = Model&lt;Record&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">any</span>&gt;, <span class=\"hljs-built_in\">string</span>&gt;;\n<span class=\"hljs-comment\">// Higher Order type that allows to infer passed in Prisma Model name</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> PrismaQuery&lt;T <span class=\"hljs-keyword\">extends</span> PrismaModel = PrismaModel&gt; =\n  WhereInput&lt;ExtractModelName&lt;T, ModelName&gt;&gt; &amp; hkt.Container&lt;PrismaQueryTypeFactory&gt;;\n\n<span class=\"hljs-keyword\">type</span> WhereInputPerModel = {\n  [K <span class=\"hljs-keyword\">in</span> ModelName]: WhereInput&lt;K&gt;;\n};\n\n<span class=\"hljs-keyword\">const</span> createPrismaAbility = createAbilityFactory&lt;ModelName, PrismaQuery&gt;();\n<span class=\"hljs-keyword\">const</span> accessibleBy = createAccessibleByFactory&lt;WhereInputPerModel, PrismaQuery&gt;();\n\n<span class=\"hljs-keyword\">export</span> {\n  createPrismaAbility,\n  accessibleBy,\n};\n</code></pre>\n<h2 id=\"want-to-help\"><a name=\"want-to-help\" class=\"h-link\" href=\"#\"></a>Want to help?</h2>\n<p>Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on guidelines for <a href=\"https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener nofollow\">contributing</a>.</p>\n<p>If you'd like to help us sustain our community and project, consider <a href=\"https://opencollective.com/casljs/contribute\" target=\"_blank\" rel=\"noopener nofollow\">to become a financial contributor on Open Collective</a></p>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/support-casljs\" target=\"_blank\" rel=\"noopener nofollow\">Support CASL</a> for details</p>\n</blockquote>\n<h2 id=\"license\"><a name=\"license\" class=\"h-link\" href=\"#\"></a>License</h2>\n<p><a href=\"http://www.opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener nofollow\">MIT License</a></p>","headings":[{"id":"casl-prisma","title":"CASL Prisma"},{"id":"installation","title":"Installation"},{"id":"usage","title":"Usage"},{"id":"note-on-subject-helper","title":"Note on subject helper"},{"id":"note-on-prisma-query-runtime-interpreter","title":"Note on Prisma Query runtime interpreter"},{"id":"finding-accessible-records","title":"Finding Accessible Records"},{"id":"type-script-support","title":"TypeScript support"},{"id":"prisma-query","title":"PrismaQuery"},{"id":"model","title":"Model"},{"id":"subjects","title":"Subjects"},{"id":"custom-prisma-client-output-path","title":"Custom PrismaClient output path"},{"id":"want-to-help","title":"Want to help?"},{"id":"license","title":"License"}],"id":"package/casl-prisma"}