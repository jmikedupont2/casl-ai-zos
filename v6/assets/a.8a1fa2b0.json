{"title":"Introduction","categories":["guide"],"order":10,"meta":{"keywords":null,"description":null},"content":"<p><a href=\"https://badge.fury.io/js/%40casl%2Fability\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badge.fury.io/js/%40casl%2Fability.svg\" alt=\"@casl/ability NPM version\"></a>\n<a href=\"https://www.npmjs.com/package/%40casl%2Fability\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/npm/dm/%40casl%2Fability.svg\" alt=\"\"></a>\n<a href=\"https://github.com/stalniy/casl/discussions\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/badge/Support-github%20discussions-green?style=flat&amp;link=https://github.com/stalniy/casl/discussions\" alt=\"Support\"></a></p>\n<h2 id=\"what-is-casl\"><a name=\"what-is-casl\" class=\"h-link\" href=\"#\"></a>What is CASL?</h2>\n<p>CASL (pronounced /ˈkæsəl/, like <strong>castle</strong>) is an isomorphic authorization JavaScript library which restricts what resources a given client is allowed to access. It's designed to be incrementally adoptable and can easily scale between a simple claim based and fully featured subject and attribute based authorization. It makes it easy to manage and share permissions across UI components, API services, and database queries.</p>\n<blockquote>\n<p>CASL implements <a href=\"https://en.wikipedia.org/wiki/Attribute-based_access_control\" target=\"_blank\" rel=\"noopener nofollow\">Attribute Based Access Control</a></p>\n</blockquote>\n<h2 id=\"getting-started\"><a name=\"getting-started\" class=\"h-link\" href=\"#\"></a>Getting Started</h2>\n<p>The easiest way to try out CASL.js is using the <a href=\"https://codesandbox.io/s/github/stalniy/casl-examples/tree/master/packages/hello-world\" target=\"_blank\" rel=\"noopener nofollow\">Hello World example</a>. Feel free to open it in another tab and follow along as we go through some basic examples. Alternatively you can create Nodejs project and install <code>@casl/ability</code> as a dependency.</p>\n<blockquote>\n<p>The <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/install&quot;}\">Installation page</app-link> provides more options of installing CASL.</p>\n</blockquote>\n<h2 id=\"basics\"><a name=\"basics\" class=\"h-link\" href=\"#\"></a>Basics</h2>\n<p>CASL operates on the abilities level, that is what a user can actually do in the application. An ability itself depends on the 4 parameters (last 3 are optional):</p>\n<ol>\n<li><strong>User Action</strong><br>\nDescribes what user can actually do in the app. User action is a word (usually a verb) which depends on the business logic (e.g., <code>prolong</code>, <code>read</code>). Very often it will be a list of words from CRUD - <code>create</code>, <code>read</code>, <code>update</code> and <code>delete</code>.</li>\n<li><strong>Subject</strong><br>\nThe subject or subject type which you want to check user action on. Usually this is a business (or domain) entity (e.g., <code>Subscription</code>, <code>Article</code>, <code>User</code>). The relation between subject and subject type is the same as relation between an object instance and its class.</li>\n<li><strong>Fields</strong><br>\nCan be used to restrict user action only to matched subject's fields (e.g., to allow moderator to update <code>status</code> field of an <code>Article</code> and disallow to update <code>description</code> or <code>title</code>)</li>\n<li><strong>Conditions</strong><br>\nCriteria which restricts user action only to matched subjects. This is useful when you need to give a permission on specific subjects (e.g., to allow user to manage own <code>Article</code>)</li>\n</ol>\n<p>At the core of CASL is a system that enables us to declaratively define and check user permissions using clear javascript syntax:</p>\n<pre><code data-filename=\"defineAbility.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can, cannot</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n  cannot(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>);\n});\n</code></pre>\n<blockquote>\n<p>CASL has sophisticated support for TypeScript but in this guide we will use JavaScript for the purpose of ease. See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/typescript&quot;}\">CASL TypeScript</app-link> for details</p>\n</blockquote>\n<p>In the example above, we have just defined a <code>MongoAbility</code> instance which permits doing anything in the app except for deleting users. As you probably guessed, <code>can</code> and <code>cannot</code> accept the same arguments but have different meanings: <code>can</code> permits an action on the specified subject and <code>cannot</code> forbids it. Both may accept up to 4 arguments (in exactly the same order as listed in <a href=\"#basics\">concepts section</a>). In this case, <code>manage</code> and <code>delete</code> are user actions and <code>all</code> and <code>User</code> are subjects.</p>\n<blockquote>\n<p><code>manage</code> and <code>all</code> are special keywords in CASL. <code>manage</code> represents any action and <code>all</code> represents any subject.</p>\n</blockquote>\n<p>Now let's try to check permissions</p>\n<pre><code data-filename=\"app.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility.js&#x27;</span>;\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>) <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>) <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>) <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>) <span class=\"hljs-comment\">// false</span>\nability.cannot(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>) <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>In the example above, the <code>MongoAbility</code> instance allows us to check permissions in a pretty readable way. By the way, all these examples demonstrate checking permissions based on a subject type (i.e. an object type or class), but CASL really shines when you need to restrict objects based on their attributes (i.e. properties).</p>\n<h2 id=\"conditions\"><a name=\"conditions\" class=\"h-link\" href=\"#\"></a>Conditions</h2>\n<p>The most common requirement for mid-sized apps is the ability to limit users so that they can perform actions only on their own resources. CASL allows us to do this by passing an object of conditions as the 3rd argument to <code>can</code> and <code>cannot</code> methods on the definition step.</p>\n<p>Before diving into the details, let's first consider requirements for the permissions of a blog website. In such a blog, a user</p>\n<ul>\n<li>can <code>read</code> any <code>Article</code></li>\n<li>can <code>update</code> own <code>Article</code>'s</li>\n<li>can <code>create</code> a <code>Comment</code> for any Article</li>\n<li>can <code>update</code> own <code>Comment</code></li>\n</ul>\n<p>Let's translate this to CASL:</p>\n<pre><code data-filename=\"defineAbility.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (user) =&gt; defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n\n  <span class=\"hljs-keyword\">if</span> (user.isLoggedIn) {\n    can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">authorId</span>: user.id });\n    can(<span class=\"hljs-string\">&#x27;create&#x27;</span>, <span class=\"hljs-string\">&#x27;Comment&#x27;</span>);\n    can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Comment&#x27;</span>, { <span class=\"hljs-attr\">authorId</span>: user.id });\n  }\n});\n</code></pre>\n<p>Do you see how real business requirements are easily translated to code? Now let's check them!</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> defineAbilityFor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> user = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">const</span> ability = defineAbilityFor(user);\n<span class=\"hljs-keyword\">const</span> article = <span class=\"hljs-comment\">/* intentionally not defined */</span>;\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article);\n</code></pre>\n<p>As you see, you can do checks on the subject the same way you do it on the subject's type! But what does the <code>article</code> variable hold inside? How does CASL know the subject type of the object referenced by this variable?</p>\n<p>Do you remember that a subject and its type belong to each other in the same way as an object instance and its class? CASL remembers this as well and retrieves <code>article.constructor.name</code> as its subject type.</p>\n<blockquote>\n<p>Classes are natural in backend but not always makes sense in frontend development. CASL supports other ways to detect subject type, see <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\">Subject type detection</app-link> for details.</p>\n</blockquote>\n<p>Let's get back to our example and define classes for <code>Article</code> and <code>Comment</code> entities:</p>\n<pre><code data-filename=\"entities.js\" class=\"language-js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Entity</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">attrs</span>)</span> {\n    <span class=\"hljs-built_in\">Object</span>.assign(<span class=\"hljs-built_in\">this</span>, attrs);\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Article</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Entity</span> </span>{}\n</code></pre>\n<p>And this is how the example with missed <code>article</code> variable looks eventually:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> defineAbilityFor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Article } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./entities&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> user = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">const</span> ability = defineAbilityFor(user);\n<span class=\"hljs-keyword\">const</span> article = <span class=\"hljs-keyword\">new</span> Article();\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article); <span class=\"hljs-comment\">// user can read any article</span>\n</code></pre>\n<p>And few more examples just to get familiar with:</p>\n<pre><code data-filename=\"app.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> defineAbilityFor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Article } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./entities&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> user = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">isLoggedIn</span>: <span class=\"hljs-literal\">true</span> };\n<span class=\"hljs-keyword\">const</span> ownArticle = <span class=\"hljs-keyword\">new</span> Article({ <span class=\"hljs-attr\">authorId</span>: user.id });\n<span class=\"hljs-keyword\">const</span> anotherArticle = <span class=\"hljs-keyword\">new</span> Article({ <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-number\">2</span> });\n<span class=\"hljs-keyword\">const</span> ability = defineAbilityFor(user);\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>) <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>) <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, ownArticle) <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, anotherArticle) <span class=\"hljs-comment\">// false, we can&#x27;t update articles which were not written by us</span>\n</code></pre>\n<blockquote>\n<p>Despite the fact that <code>can</code> and <code>cannot</code> functions in <code>defineAbility</code> callback are similar to <code>can</code> and <code>cannot</code> methods of <code>MongoAbility</code> class, they have completely different purposes and accept different arguments. See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;cookbook/less-confusing-can-api&quot;}\">Make <code>can</code> API less confusing</app-link> if it confuses you.</p>\n</blockquote>\n<p><strong>Pay attention</strong> that conditions object contains the same keys as the entity we want to check. This is how CASL matches entities by conditions. In our case, it just checks that <code>authorId</code> in <code>Article</code> instance equals to <code>authorId</code> in conditions object. Conditions may have several fields, in that case all fields should match (<code>AND</code> logic).</p>\n<p>But conditions are not restricted to simple equality checks! Thanks to <a href=\"https://github.com/stalniy/ucast\" target=\"_blank\" rel=\"noopener nofollow\">ucast</a> <code>MongoAbility</code> instances can match objects using <a href=\"http://docs.mongodb.org/manual/reference/operator/query/\" target=\"_blank\" rel=\"noopener nofollow\">MongoDB query language</a>.</p>\n<blockquote>\n<p>If you are not familiar with MongoDB query language, see <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/conditions-in-depth&quot;}\">CASL conditions in depth</app-link> for details</p>\n</blockquote>\n<p>You can define the same pair of action and subject with different conditions multiple times. For example, let's allow our blog users to share drafts and publish articles:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineAbilityFor</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n    can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> });\n    can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">sharedWith</span>: user.id });\n  });\n}\n</code></pre>\n<p>In such case, the pair of action/subject rules are combined by logical <code>OR</code>. More formally, this can be translated as &quot;users can read Article if it's published OR users can read Article if it's not published AND shared with them&quot;.</p>\n<p>But that's not all, if you need more granular permission checks, you can define them on subject's attributes (i.e., fields)!</p>\n<h2 id=\"fields\"><a name=\"fields\" class=\"h-link\" href=\"#\"></a>Fields</h2>\n<p>Sometimes you may need to restrict which fields a user can access. For example, let's allow only moderators to publish <code>Article</code>:</p>\n<pre><code data-filename=\"defineAbility.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (user) =&gt; defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n  can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, [<span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;description&#x27;</span>], { <span class=\"hljs-attr\">authorId</span>: user.id })\n\n  <span class=\"hljs-keyword\">if</span> (user.isModerator) {\n    can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, [<span class=\"hljs-string\">&#x27;published&#x27;</span>])\n  }\n});\n</code></pre>\n<p>Here we defined that any user can update <code>title</code> and <code>description</code> fields of their own <code>Article</code>s and only moderators can update <code>published</code> field.</p>\n<blockquote>\n<p>If fields are not specified, a user is allowed to access any field.</p>\n</blockquote>\n<p>To check permissions use the same <code>can</code> and <code>cannot</code> methods of <code>MongoAbility</code> instance:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> defineAbilityFor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Article } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./entities&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> moderator = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">isModerator</span>: <span class=\"hljs-literal\">true</span> };\n<span class=\"hljs-keyword\">const</span> ownArticle = <span class=\"hljs-keyword\">new</span> Article({ <span class=\"hljs-attr\">authorId</span>: moderator.id });\n<span class=\"hljs-keyword\">const</span> foreignArticle = <span class=\"hljs-keyword\">new</span> Article({ <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-number\">10</span> });\n<span class=\"hljs-keyword\">const</span> ability = defineAbilityFor(moderator);\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>) <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, <span class=\"hljs-string\">&#x27;published&#x27;</span>) <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, ownArticle, <span class=\"hljs-string\">&#x27;published&#x27;</span>) <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, foreignArticle, <span class=\"hljs-string\">&#x27;title&#x27;</span>) <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<blockquote>\n<p>For more complex cases, you can use nested fields and wildcards, see <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/restricting-fields&quot;}\">Restricting field access</app-link> for details</p>\n</blockquote>\n<h2 id=\"checking-logic\"><a name=\"checking-logic\" class=\"h-link\" href=\"#\"></a>Checking logic</h2>\n<p>Let's consider a simple example where user can publish articles:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Article } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./entities&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> })\n});\n<span class=\"hljs-keyword\">const</span> article = <span class=\"hljs-keyword\">new</span> Article({ <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> });\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article); <span class=\"hljs-comment\">// (1)</span>\nability.can(<span class=\"hljs-string\">&#x27;do&#x27;</span>, <span class=\"hljs-string\">&#x27;SomethingUndeclared&#x27;</span>); <span class=\"hljs-comment\">// (2)</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>); <span class=\"hljs-comment\">// (3)</span>\n</code></pre>\n<p>Line <code>(1)</code> returns <code>true</code> as we expected. Line <code>(2)</code> return <code>false</code> because for any unknown subject or action CASL returns <code>false</code>, by default everything is forbidden (if <code>manage</code> and <code>all</code> keywords are not used). But what would you expect line <code>(3)</code> to return? The answer may be unexpected for some of you, it returns <code>true</code> as well. <strong>Why?!</strong></p>\n<p>Let's get back to our experience for a while. Historically, majority of permissions management libs were built on top of roles or flags. So, a user either has permission or not. This can be expressed in pseudo code:</p>\n<pre><code class=\"hljs language-js\">allow(<span class=\"hljs-string\">&#x27;read_article&#x27;</span>);\nallow(<span class=\"hljs-string\">&#x27;update_article&#x27;</span>);\n</code></pre>\n<p>This is interpreted as &quot;user can read ALL articles and user can update ALL articles&quot;. So, this is &quot;all or nothing&quot; mindset.</p>\n<p><strong>But CASL is different!</strong> It allows us to ask different questions to our permissions. So, when you check on a</p>\n<ul>\n<li>subject, you ask &quot;can I read THIS article?&quot;</li>\n<li>subject type, you ask &quot;can I read SOME article?&quot; (i.e., at least one article)</li>\n</ul>\n<p>It's very useful when you don't have an instance to check but know its type (for example, during creation), so this allows your app to fail fast.</p>\n<blockquote>\n<p>If you do checks on a subject type, you need to check permissions one more time on the final subject, right before sending request to API or database.</p>\n</blockquote>\n<h2 id=\"inverted-rules\"><a name=\"inverted-rules\" class=\"h-link\" href=\"#\"></a>Inverted rules</h2>\n<p>This guide talk a lot about allowable permissions but nothing about disallowable ones. This is for the reason. The direct logic is much simpler to understand, and we recommend to use it whenever possible.</p>\n<p>To define an inverted rule, you need to use the 2nd argument in the callback of <code>defineAbility</code>. Let's give a user a permission to do anything but not delete:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can, cannot</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n  cannot(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n});\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<p>As you should know direct rules are checked by logical <code>OR</code> on the other hand inverted ones are checked by logical <code>AND</code>. So, in the example above user:</p>\n<ul>\n<li>can do anything on all entities</li>\n<li>and cannot delete any entity</li>\n</ul>\n<p>When defining direct and inverted rules for the same pair of action and subject the order of rules matters: <code>cannot</code> declarations should follow after <code>can</code>, otherwise they will be overridden by <code>can</code>. For example, let's disallow to read all private objects (those that have property <code>private = true</code>):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> user = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can, cannot</span>) =&gt;</span> {\n  cannot(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> });\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>, { <span class=\"hljs-attr\">authorId</span>: user.id });\n});\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> }); <span class=\"hljs-comment\">// false</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, { <span class=\"hljs-attr\">authorId</span>: user.id }); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, { <span class=\"hljs-attr\">authorId</span>: user.id, <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> }); <span class=\"hljs-comment\">// true!</span>\n</code></pre>\n<p>Here we got an unexpected result because direct rule is the last one. To fix the result just revert those rules and <strong>always remember to put inverted rules after the direct one!</strong></p>\n<h3 id=\"forbidden-reasons\"><a name=\"forbidden-reasons\" class=\"h-link\" href=\"#\"></a>Forbidden reasons</h3>\n<p>The good point about inverted rules is that they help to explicitly forbid particular actions. Moreover they allow to add explanation. Let's see how</p>\n<pre><code data-filename=\"defineAbility.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can, cannot</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n  cannot(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> })\n    .because(<span class=\"hljs-string\">&#x27;You are not allowed to read private information&#x27;</span>);\n});\n</code></pre>\n<p>We can get this message back by checking permissions using <code>ForbiddenError</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { ForbiddenError } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">try</span> {\n  ForbiddenError.from(ability).throwUnlessCan(<span class=\"hljs-string\">&#x27;read&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> })\n} <span class=\"hljs-keyword\">catch</span> (error) {\n  <span class=\"hljs-keyword\">if</span> (error <span class=\"hljs-keyword\">instanceof</span> ForbiddenError) {\n    <span class=\"hljs-built_in\">console</span>.log(error.message); <span class=\"hljs-comment\">// You are not allowed to read private information</span>\n  }\n\n  <span class=\"hljs-keyword\">throw</span> error\n}\n</code></pre>\n<blockquote>\n<p>To learn more about <code>ForbiddenError</code>, see <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;api&quot;}\" hash=\"forbidden-error\">ForbiddenError API</app-link></p>\n</blockquote>\n<h2 id=\"update-rules\"><a name=\"update-rules\" class=\"h-link\" href=\"#\"></a>Update rules</h2>\n<p>Sometimes, especially in frontend application development, we need to update <code>Ability</code> instance (e.g., on login or logout). To do this, we can use <code>update</code> method:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n\nability.update([]); <span class=\"hljs-comment\">// forbids everything</span>\nability.update([ <span class=\"hljs-comment\">// switch to readonly mode</span>\n  { <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;all&#x27;</span> }\n]);\n</code></pre>\n<p>Also we can use <code>AbilityBuilder</code> to create rules:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { createMongoAbility, AbilityBuilder } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = createMongoAbility();\n\n<span class=\"hljs-keyword\">const</span> { can, rules } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(createMongoAbility);\ncan(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n\nability.update(rules);\n</code></pre>\n<p>To track when rules are updated, we can subscribe to <code>update</code> (before ability is updated) or <code>updated</code> (after ability is updated) events of <code>PureAbility</code> instance:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> unsubscribe = ability.on(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">{ rules, target }</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// `rules` is an array passed to `update` method</span>\n  <span class=\"hljs-comment\">// `target` is a PureAbility instance that triggered event</span>\n})\n\nunsubscribe() <span class=\"hljs-comment\">// removes subscription</span>\n</code></pre>\n<h2 id=\"what-else\"><a name=\"what-else\" class=\"h-link\" href=\"#\"></a>What else?</h2>\n<p>CASL does not have a concept of &quot;a role&quot; and this makes it very powerful! As CASL allows to describe user abilities in your application, you can use it to:</p>\n<ol>\n<li>Implement <a href=\"https://en.wikipedia.org/wiki/Feature_toggle\" target=\"_blank\" rel=\"noopener nofollow\">feature toggles</a><br>\nHide unfinished feature or show it to beta testers only.</li>\n<li>Conduct <a href=\"https://en.wikipedia.org/wiki/A/B_testing\" target=\"_blank\" rel=\"noopener nofollow\">A/B testing</a><br>\nBased on age, region, country or whatever hide features for some users and show for others</li>\n<li>Simple Business Logic<br>\nDisallow users to watch video if their subscription has been expired</li>\n</ol>\n<blockquote>\n<p>See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;cookbook/roles-with-static-permissions&quot;}\">Roles with predefined permissions</app-link> for details.</p>\n</blockquote>\n<h2 id=\"ready-for-more\"><a name=\"ready-for-more\" class=\"h-link\" href=\"#\"></a>Ready for More?</h2>\n<p>We’ve briefly introduced all the features of CASL.js core - the rest of this guide will cover them and other advanced features with much finer details, so make sure to read through it all!</p>","headings":[{"id":"what-is-casl","title":"What is CASL?"},{"id":"getting-started","title":"Getting Started"},{"id":"basics","title":"Basics"},{"id":"conditions","title":"Conditions"},{"id":"fields","title":"Fields"},{"id":"checking-logic","title":"Checking logic"},{"id":"inverted-rules","title":"Inverted rules"},{"id":"forbidden-reasons","title":"Forbidden reasons"},{"id":"update-rules","title":"Update rules"},{"id":"what-else","title":"What else?"},{"id":"ready-for-more","title":"Ready for More?"}],"id":"guide/intro"}