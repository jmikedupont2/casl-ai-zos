{"title":"CASL Aurelia","categories":["package"],"order":130,"meta":{"keywords":null,"description":null},"content":"<h1 id=\"casl-aurelia\"><a name=\"casl-aurelia\" class=\"h-link\" href=\"#\"></a>CASL Aurelia</h1>\n<p><a href=\"https://badge.fury.io/js/%40casl%2Faurelia\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badge.fury.io/js/%40casl%2Faurelia.svg\" alt=\"@casl/aurelia NPM version\"></a>\n<a href=\"https://www.npmjs.com/package/%40casl%2Faurelia\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/npm/dm/%40casl%2Faurelia.svg\" alt=\"\"></a>\n<a href=\"https://github.com/stalniy/casl/discussions\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/badge/Support-github%20discussions-green?style=flat&amp;link=https://github.com/stalniy/casl/discussions\" alt=\"Support\"></a></p>\n<p>This package allows to integrate <code>@casl/ability</code> with <a href=\"https://aurelia.io/\" target=\"_blank\" rel=\"noopener nofollow\">Aurelia</a> application. It provides <code>AbleValueConverter</code> and <strong>deprecated</strong> <code>CanValueConverter</code> to Aurelia templates, so you can show or hide components, buttons, etc based on user ability to see them.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"h-link\" href=\"#\"></a>Installation</h2>\n<pre><code class=\"hljs language-sh\">npm install @casl/aurelia @casl/ability\n<span class=\"hljs-comment\"># or</span>\nyarn add @casl/aurelia @casl/ability\n<span class=\"hljs-comment\"># or</span>\npnpm add @casl/aurelia @casl/ability\n</code></pre>\n<h2 id=\"getting-started\"><a name=\"getting-started\" class=\"h-link\" href=\"#\"></a>Getting started</h2>\n<p><code>@casl/aurelia</code> exports <code>configure</code> function which fulfills requirements of <a href=\"https://aurelia.io/docs/plugins/write-new-plugin\" target=\"_blank\" rel=\"noopener nofollow\">Aurelia plugin</a>. So, you can pass it in <code>plugin</code> function:</p>\n<pre><code data-filename=\"main.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">configure</span>(<span class=\"hljs-params\">aurelia</span>) </span>{\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin(<span class=\"hljs-string\">&#x27;@casl/aurelia&#x27;</span>, ability); <span class=\"hljs-comment\">// &lt;-- add plugin</span>\n\n  aurelia.start().then(<span class=\"hljs-function\">() =&gt;</span> aurelia.setRoot());\n}\n</code></pre>\n<p>The plugin accepts an optional 2nd argument, ability instance for your app. You can also register the instance by calling <code>container</code>'s API directly but make sure that you register <code>PureAbility</code> key, value converters request <code>Ability</code> instance by this key. This allows an application developer to decide how to configure actions, subjects and conditions. Also this is the only way to get maximum from tree shaking (e.g., if you don't need conditions, you can use <code>PureAbility</code> and get rid of <code>sift</code> library).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { Ability, PureAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">configure</span>(<span class=\"hljs-params\">aurelia</span>) </span>{\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin(<span class=\"hljs-string\">&#x27;@casl/aurelia&#x27;</span>); <span class=\"hljs-comment\">// &lt;-- add plugin</span>\n\n  aurelia.container.registerInstance(PureAbility, ability);\n  aurelia.container.registerInstance(Ability, ability);\n  aurelia.start().then(<span class=\"hljs-function\">() =&gt;</span> aurelia.setRoot());\n}\n</code></pre>\n<blockquote>\n<p>Read <a href=\"https://casl.js.org/v5/en/advanced/typescript\" target=\"_blank\" rel=\"noopener nofollow\">CASL and TypeScript</a> to get more details about <code>Ability</code> type configuration.</p>\n</blockquote>\n<h2 id=\"update-ability-instance\"><a name=\"update-ability-instance\" class=\"h-link\" href=\"#\"></a>Update Ability instance</h2>\n<p>Majority of applications that need permission checking support have something like <code>AuthService</code> or <code>LoginService</code> or <code>Session</code> service (name it as you wish) which is responsible for user login/logout functionality. Whenever user login (and logout), we need to update <code>Ability</code> instance with new rules.</p>\n<p>Let's imagine that server returns user with a role on login:</p>\n<pre><code data-filename=\"Session.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { autoinject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;aurelia-framework&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Ability, AbilityBuilder } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-meta\">@autoinject</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Session</span> </span>{\n  <span class=\"hljs-keyword\">private</span> token: <span class=\"hljs-built_in\">string</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> ability: Ability</span>)</span> {}\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">login</span>(<span class=\"hljs-params\">details</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> params = { <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>, <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(details) };\n    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">&#x27;path/to/api/login&#x27;</span>, params)\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">session</span>) =&gt;</span> {\n        <span class=\"hljs-built_in\">this</span>.updateAbility(session.user);\n        <span class=\"hljs-built_in\">this</span>.token = session.token;\n      });\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-title\">updateAbility</span>(<span class=\"hljs-params\">user</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> { can, rules } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(Ability);\n\n    <span class=\"hljs-keyword\">if</span> (user.role === <span class=\"hljs-string\">&#x27;admin&#x27;</span>) {\n      can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n    }\n\n    <span class=\"hljs-built_in\">this</span>.ability.update(rules);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">logout</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.token = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-built_in\">this</span>.ability.update([]);\n  }\n}\n</code></pre>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/guide/define-rules\" target=\"_blank\" rel=\"noopener nofollow\">Define rules</a> to get more information of how to define <code>Ability</code></p>\n</blockquote>\n<p>Then use this <code>Session</code> service in <code>LoginComponent</code>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { autoinject, bindable } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;aurelia-framework&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Session } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../services/Session&#x27;</span>;\n\n<span class=\"hljs-meta\">@autoinject</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginFormCustomElement</span> </span>{\n  <span class=\"hljs-meta\">@bindable</span> email: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-meta\">@bindable</span> password: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> session: Session</span>)</span> {}\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">login</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> { email, password } = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.session.login({ email, password });\n  }\n}\n</code></pre>\n<h2 id=\"check-permissions-in-templates\"><a name=\"check-permissions-in-templates\" class=\"h-link\" href=\"#\"></a>Check permissions in templates</h2>\n<p>To check permissions in any template you can use <code>AbleValueConverter</code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">if.bind</span>=<span class=\"hljs-string\">&quot;&#x27;create&#x27; | able: &#x27;Post&#x27;&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">click.trigger</span>=<span class=\"hljs-string\">&quot;createPost()&quot;</span>&gt;</span>Add Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p>You can read the expression in <code>if</code> as &quot;if creatable Post&quot;</p>\n</blockquote>\n<p>Or with <strong>deprecated</strong> <code>CanPipe</code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">&quot;&#x27;Post&#x27; | can: &#x27;create&#x27;&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">click.trigger</span>=<span class=\"hljs-string\">&quot;createPost()&quot;</span>&gt;</span>Add Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p><code>CanValueConverter</code> was deprecated because it is less readable and it was harder to integrate it with all type definitions supported by <code>Ability</code>'s <code>can</code> method. That's why <code>CanValueConverter</code> has weaker typings than <code>AbleValueConverter</code>.</p>\n<h2 id=\"why-value-converter-and-not-custom-attribute\"><a name=\"why-value-converter-and-not-custom-attribute\" class=\"h-link\" href=\"#\"></a>Why value converter and not custom attribute?</h2>\n<p>Custom attribute cannot be used to pass values into inputs of other components. For example, we need to enable or disable a button based on user's ability to create a post. With directive we cannot do this but we can do this with value converter:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">disabled.bind</span>=<span class=\"hljs-string\">&quot;!(&#x27;create&#x27; | able: &#x27;Post&#x27;)&quot;</span>&gt;</span>Add Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre>\n<p>Value converters in Aurelia are very good in terms of performance, they are not called if their arguments are not changed. Also they support signal bindings, so can be easily updated when you update <code>Ability</code> instance.</p>\n<h2 id=\"type-script-support\"><a name=\"type-script-support\" class=\"h-link\" href=\"#\"></a>TypeScript support</h2>\n<p>The package is written in TypeScript, so it will warn you about wrong usage.</p>\n<p>It may be a bit tedious to use application specific abilities in Aurelia app because everywhere you inject <code>Ability</code> instance you will need to import its generic parameters:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { autoinject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;aurelia-framework&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AppAbilities } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../services/AppAbility&#x27;</span>;\n\n<span class=\"hljs-meta\">@autoinject</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoItemCustomElement</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> ability: Ability&lt;AppAbilities&gt;</span>)</span> {}\n}\n</code></pre>\n<p>To make the life easier, instead of creating a separate type you can create a separate class:</p>\n<pre><code data-filename=\"AppAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> Actions = <span class=\"hljs-string\">&#x27;create&#x27;</span> | <span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span> | <span class=\"hljs-string\">&#x27;delete&#x27;</span>;\n<span class=\"hljs-keyword\">type</span> Subjects = <span class=\"hljs-string\">&#x27;Article&#x27;</span> | <span class=\"hljs-string\">&#x27;User&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> AppAbilities = [Actions, Subjects];\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppAbility</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Ability</span>&lt;<span class=\"hljs-title\">AppAbilities</span>&gt; </span>{\n}\n</code></pre>\n<p>And register this class in Aurelia's container:</p>\n<pre><code data-filename=\"main.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { AppAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/AppAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">configure</span>(<span class=\"hljs-params\">aurelia</span>) </span>{\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging()\n    .plugin(<span class=\"hljs-string\">&#x27;@casl/aurelia&#x27;</span>); <span class=\"hljs-comment\">// &lt;-- add plugin</span>\n\n  <span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> AppAbility();\n  aurelia.container.registerInstance(PureAbility, ability);\n  aurelia.container.registerInstance(AppAbility, ability);\n  aurelia.start().then(<span class=\"hljs-function\">() =&gt;</span> aurelia.setRoot());\n}\n</code></pre>\n<h2 id=\"want-to-help\"><a name=\"want-to-help\" class=\"h-link\" href=\"#\"></a>Want to help?</h2>\n<p>Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on guidelines for <a href=\"https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener nofollow\">contributing</a>.</p>\n<p>If you'd like to help us sustain our community and project, consider <a href=\"https://opencollective.com/casljs/contribute\" target=\"_blank\" rel=\"noopener nofollow\">to become a financial contributor on Open Collective</a></p>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/support-casljs\" target=\"_blank\" rel=\"noopener nofollow\">Support CASL</a> for details</p>\n</blockquote>\n<h2 id=\"license\"><a name=\"license\" class=\"h-link\" href=\"#\"></a>License</h2>\n<p><a href=\"http://www.opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener nofollow\">MIT License</a></p>","headings":[{"id":"casl-aurelia","title":"CASL Aurelia"},{"id":"installation","title":"Installation"},{"id":"getting-started","title":"Getting started"},{"id":"update-ability-instance","title":"Update Ability instance"},{"id":"check-permissions-in-templates","title":"Check permissions in templates"},{"id":"why-value-converter-and-not-custom-attribute","title":"Why value converter and not custom attribute?"},{"id":"type-script-support","title":"TypeScript support"},{"id":"want-to-help","title":"Want to help?"},{"id":"license","title":"License"}],"id":"package/casl-aurelia"}