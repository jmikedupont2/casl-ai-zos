{"title":"CASL Mongoose","categories":["package"],"order":110,"meta":{"keywords":null,"description":null},"content":"<h1 id=\"casl-mongoose\"><a name=\"casl-mongoose\" class=\"h-link\" href=\"#\"></a>CASL Mongoose</h1>\n<p><a href=\"https://badge.fury.io/js/%40casl%2Fmongoose\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badge.fury.io/js/%40casl%2Fmongoose.svg\" alt=\"@casl/mongoose NPM version\"></a>\n<a href=\"https://www.npmjs.com/package/%40casl%2Fmongoose\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/npm/dm/%40casl%2Fmongoose.svg\" alt=\"\"></a>\n<a href=\"https://github.com/stalniy/casl/discussions\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/badge/Support-github%20discussions-green?style=flat&amp;link=https://github.com/stalniy/casl/discussions\" alt=\"Support\"></a></p>\n<p>This package integrates <a href=\"https://github.com/stalniy/casl\" target=\"_blank\" rel=\"noopener nofollow\">CASL</a> and <a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener nofollow\">MongoDB</a>. In other words, it allows to fetch records based on CASL rules from MongoDB and answer questions like: &quot;Which records can be read?&quot; or &quot;Which records can be updated?&quot;.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"h-link\" href=\"#\"></a>Installation</h2>\n<pre><code class=\"hljs language-sh\">npm install @casl/mongoose @casl/ability\n<span class=\"hljs-comment\"># or</span>\nyarn add @casl/mongoose @casl/ability\n<span class=\"hljs-comment\"># or</span>\npnpm add @casl/mongoose @casl/ability\n</code></pre>\n<h2 id=\"usage\"><a name=\"usage\" class=\"h-link\" href=\"#\"></a>Usage</h2>\n<p><code>@casl/mongoose</code> can be integrated not only with <a href=\"http://mongoosejs.com/\" target=\"_blank\" rel=\"noopener nofollow\">mongoose</a> but also with any <a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener nofollow\">MongoDB</a> JS driver thanks to new <code>accessibleBy</code> helper function.</p>\n<h3 id=\"accessible-by-helper\"><a name=\"accessible-by-helper\" class=\"h-link\" href=\"#\"></a><code>accessibleBy</code> helper</h3>\n<p>This neat helper function allows to convert ability rules to MongoDB query and fetch only accessible records from the database. It can be used with mongoose or <a href=\"https://mongodb.github.io/node-mongodb-native/\" target=\"_blank\" rel=\"noopener nofollow\">MongoDB adapter</a>:</p>\n<h4 id=\"mongo-db-adapter\"><a name=\"mongo-db-adapter\" class=\"h-link\" href=\"#\"></a>MongoDB adapter</h4>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { accessibleBy } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;@casl/mongoose&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> { MongoClient } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;mongodb&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./ability&#x27;</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> db = <span class=\"hljs-keyword\">await</span> MongoClient.connect(<span class=\"hljs-string\">&#x27;mongodb://localhost:27017/blog&#x27;</span>);\n  <span class=\"hljs-keyword\">let</span> posts;\n\n  <span class=\"hljs-keyword\">try</span> {\n    posts = <span class=\"hljs-keyword\">await</span> db.collection(<span class=\"hljs-string\">&#x27;posts&#x27;</span>).find(accessibleBy(ability, <span class=\"hljs-string\">&#x27;update&#x27;</span>).ofType(<span class=\"hljs-string\">&#x27;Post&#x27;</span>));\n  } <span class=\"hljs-keyword\">finally</span> {\n    db.close();\n  }\n\n  <span class=\"hljs-built_in\">console</span>.log(posts);\n}\n</code></pre>\n<p>This can also be combined with other conditions with help of <code>$and</code> operator:</p>\n<pre><code class=\"hljs language-js\">posts = <span class=\"hljs-keyword\">await</span> db.collection(<span class=\"hljs-string\">&#x27;posts&#x27;</span>).find({\n  <span class=\"hljs-attr\">$and</span>: [\n    accessibleBy(ability, <span class=\"hljs-string\">&#x27;update&#x27;</span>).ofType(<span class=\"hljs-string\">&#x27;Post&#x27;</span>),\n    { <span class=\"hljs-attr\">public</span>: <span class=\"hljs-literal\">true</span> }\n  ]\n});\n</code></pre>\n<p><strong>Important!</strong>: never use spread operator (i.e., <code>...</code>) to combine conditions provided by <code>accessibleBy</code> with something else because you may accidentally overwrite properties that restrict access to particular records:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// returns { authorId: 1 }</span>\n<span class=\"hljs-keyword\">const</span> permissionRestrictedConditions = accessibleBy(ability, <span class=\"hljs-string\">&#x27;update&#x27;</span>).ofType(<span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n\n<span class=\"hljs-keyword\">const</span> query = {\n  ...permissionRestrictedConditions,\n  <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-number\">2</span>\n};\n</code></pre>\n<p>In the case above, we overwrote <code>authorId</code> property and basically allowed non-authorized access to posts of author with <code>id = 2</code></p>\n<p>If there are no permissions defined for particular action/subjectType, <code>accessibleBy</code> will return <code>{ $expr: { $eq: [0, 1] } }</code> and when it's sent to MongoDB, database will return an empty result set.</p>\n<h4 id=\"mongoose\"><a name=\"mongoose\" class=\"h-link\" href=\"#\"></a>Mongoose</h4>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./Post&#x27;</span>) <span class=\"hljs-comment\">// mongoose model</span>\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./ability&#x27;</span>) <span class=\"hljs-comment\">// defines Ability instance</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> accessiblePosts = <span class=\"hljs-keyword\">await</span> Post.find(accessibleBy(ability).ofType(<span class=\"hljs-string\">&#x27;Post&#x27;</span>));\n  <span class=\"hljs-built_in\">console</span>.log(accessiblePosts);\n}\n</code></pre>\n<p>Historically, <code>@casl/mongoose</code> was intended for super easy integration with <a href=\"http://mongoosejs.com/\" target=\"_blank\" rel=\"noopener nofollow\">mongoose</a> but now we re-orient it to be more MongoDB specific package due to complexity working with mongoose types in TS. This plugins are still shipped but deprecated and we encourage you either write own plugins on app level or use <code>accessibleBy</code> and <code>accessibleFieldsBy</code> helpers</p>\n<h3 id=\"accessible-records-plugin\"><a name=\"accessible-records-plugin\" class=\"h-link\" href=\"#\"></a>Accessible Records plugin</h3>\n<p>This plugin is deprecated, the recommended way is to use <a href=\"#accessibleBy-helper\"><code>accessibleBy</code> helper function</a></p>\n<p><code>accessibleRecordsPlugin</code> is a plugin which adds <code>accessibleBy</code> method to query and static methods of mongoose models. We can add this plugin globally:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { accessibleRecordsPlugin } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;@casl/mongoose&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;mongoose&#x27;</span>);\n\nmongoose.plugin(accessibleRecordsPlugin);\n</code></pre>\n<blockquote>\n<p>Make sure to add the plugin before calling <code>mongoose.model(...)</code> method. Mongoose won't add global plugins to models that where created before calling <code>mongoose.plugin()</code>.</p>\n</blockquote>\n<p>or to a particular model:</p>\n<pre><code data-filename=\"Post.js\" class=\"language-js\"><span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;mongoose&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> { accessibleRecordsPlugin } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;@casl/mongoose&#x27;</span>)\n\n<span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-keyword\">new</span> mongoose.Schema({\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">String</span>,\n  <span class=\"hljs-attr\">author</span>: <span class=\"hljs-built_in\">String</span>\n})\n\nPost.plugin(accessibleRecordsPlugin)\n\n<span class=\"hljs-built_in\">module</span>.exports = mongoose.model(<span class=\"hljs-string\">&#x27;Post&#x27;</span>, Post)\n</code></pre>\n<p>Afterwards, we can fetch accessible records using <code>accessibleBy</code> method on <code>Post</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./Post&#x27;</span>)\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./ability&#x27;</span>) <span class=\"hljs-comment\">// defines Ability instance</span>\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> accessiblePosts = <span class=\"hljs-keyword\">await</span> Post.accessibleBy(ability);\n  <span class=\"hljs-built_in\">console</span>.log(accessiblePosts);\n}\n</code></pre>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/guide/intro\" target=\"_blank\" rel=\"noopener nofollow\">CASL guide</a> to learn how to define abilities</p>\n</blockquote>\n<p>or on existing query instance:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./Post&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./ability&#x27;</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> accessiblePosts = <span class=\"hljs-keyword\">await</span> Post.find({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;draft&#x27;</span> })\n    .accessibleBy(ability)\n    .select(<span class=\"hljs-string\">&#x27;title&#x27;</span>);\n  <span class=\"hljs-built_in\">console</span>.log(accessiblePosts);\n}\n</code></pre>\n<p><code>accessibleBy</code> returns an instance of <code>mongoose.Query</code> and that means you can chain it with any <code>mongoose.Query</code>'s method (e.g., <code>select</code>, <code>limit</code>, <code>sort</code>). By default, <code>accessibleBy</code> constructs a query based on the list of rules for <code>read</code> action but we can change this by providing the 2nd optional argument:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./Post&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./ability&#x27;</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> postsThatCanBeUpdated = <span class=\"hljs-keyword\">await</span> Post.accessibleBy(ability, <span class=\"hljs-string\">&#x27;update&#x27;</span>);\n  <span class=\"hljs-built_in\">console</span>.log(postsThatCanBeUpdated);\n}\n</code></pre>\n<blockquote>\n<p><code>accessibleBy</code> is built on top of <code>rulesToQuery</code> function from <code>@casl/ability/extra</code>. Read <a href=\"https://casl.js.org/v5/en/advanced/ability-to-database-query\" target=\"_blank\" rel=\"noopener nofollow\">Ability to database query</a> to get insights of how it works.</p>\n</blockquote>\n<p>In case user doesn’t have permission to do a particular action, CASL will throw <code>ForbiddenError</code> and will not send request to MongoDB. It also adds <code>__forbiddenByCasl__: 1</code> condition for additional safety.</p>\n<p>For example, lets find all posts which user can delete (we haven’t defined abilities for delete):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { defineAbility } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;mongoose&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./Post&#x27;</span>);\n\nmongoose.set(<span class=\"hljs-string\">&#x27;debug&#x27;</span>, <span class=\"hljs-literal\">true</span>);\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\"><span class=\"hljs-params\">can</span> =&gt;</span> can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">false</span> }));\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> posts = <span class=\"hljs-keyword\">await</span> Post.accessibleBy(ability, <span class=\"hljs-string\">&#x27;delete&#x27;</span>);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-built_in\">console</span>.log(error) <span class=\"hljs-comment\">// ForbiddenError;</span>\n  }\n}\n</code></pre>\n<p>We can also use the resulting conditions in <a href=\"https://mongoosejs.com/docs/api.html#aggregate_Aggregate\" target=\"_blank\" rel=\"noopener nofollow\">aggregation pipeline</a>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./Post&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./ability&#x27;</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> query = Post.accessibleBy(ability)\n    .where({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;draft&#x27;</span> })\n    .getQuery();\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> Post.aggregate([\n    {\n      <span class=\"hljs-attr\">$match</span>: {\n        <span class=\"hljs-attr\">$and</span>: [\n          query,\n          <span class=\"hljs-comment\">// other aggregate conditions</span>\n        ]\n      }\n    },\n    <span class=\"hljs-comment\">// other pipelines here</span>\n  ]);\n  <span class=\"hljs-built_in\">console</span>.log(result);\n}\n</code></pre>\n<p>or in <a href=\"https://mongoosejs.com/docs/api.html#model_Model.mapReduce\" target=\"_blank\" rel=\"noopener nofollow\">mapReduce</a>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./Post&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./ability&#x27;</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> query = Post.accessibleBy(ability)\n    .where({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;draft&#x27;</span> })\n    .getQuery();\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> Post.mapReduce({\n    <span class=\"hljs-attr\">query</span>: {\n      <span class=\"hljs-attr\">$and</span>: [\n        query,\n        <span class=\"hljs-comment\">// other conditions</span>\n      ]\n    },\n    <span class=\"hljs-attr\">map</span>: <span class=\"hljs-function\">() =&gt;</span> emit(<span class=\"hljs-built_in\">this</span>.title, <span class=\"hljs-number\">1</span>);\n    reduce: <span class=\"hljs-function\">(<span class=\"hljs-params\">_, items</span>) =&gt;</span> items.length;\n  });\n  <span class=\"hljs-built_in\">console</span>.log(result);\n}\n</code></pre>\n<h3 id=\"accessible-fields-plugin\"><a name=\"accessible-fields-plugin\" class=\"h-link\" href=\"#\"></a>Accessible Fields plugin</h3>\n<p><code>accessibleFieldsPlugin</code> is a plugin that adds <code>accessibleFieldsBy</code> method to instance and static methods of a model and allows to retrieve all accessible fields. This is useful when we need to send only accessible part of a model in response:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { accessibleFieldsPlugin } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;@casl/mongoose&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;mongoose&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> pick = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;lodash/pick&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./ability&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./app&#x27;</span>); <span class=\"hljs-comment\">// express app</span>\n\nmongoose.plugin(accessibleFieldsPlugin);\n\n<span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./Post&#x27;</span>);\n\napp.get(<span class=\"hljs-string\">&#x27;/api/posts/:id&#x27;</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">const</span> post = <span class=\"hljs-keyword\">await</span> Post.accessibleBy(ability).findByPk(req.params.id);\n  res.send(pick(post, post.accessibleFieldsBy(ability))\n});\n</code></pre>\n<p>Method with the same name exists on Model's class. But <strong>it's important</strong> to understand the difference between them. Static method does not take into account conditions! It follows the same <a href=\"https://casl.js.org/v5/en/guide/intro#checking-logic\" target=\"_blank\" rel=\"noopener nofollow\">checking logic</a> as <code>Ability</code>'s <code>can</code> method. Let's see an example to recap:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { defineAbility } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> Post = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./Post&#x27;</span>);\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, [<span class=\"hljs-string\">&#x27;title&#x27;</span>], { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> });\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, [<span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;description&#x27;</span>], { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">false</span> });\n});\n<span class=\"hljs-keyword\">const</span> post = <span class=\"hljs-keyword\">new</span> Post({ <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;Private post&#x27;</span> });\n\nPost.accessibleFieldsBy(ability); <span class=\"hljs-comment\">// [&#x27;title&#x27;, &#x27;description&#x27;]</span>\npost.accessibleFieldsBy(ability); <span class=\"hljs-comment\">// [&#x27;title&#x27;]</span>\n</code></pre>\n<p>As you can see, a static method returns all fields that can be read for all posts. At the same time, an instance method returns fields that can be read from this particular <code>post</code> instance. That's why there is no much sense (except you want to reduce traffic between app and database) to pass the result of static method into <code>mongoose.Query</code>'s <code>select</code> method because eventually you will need to call <code>accessibleFieldsBy</code> on every instance.</p>\n<h3 id=\"accessible-fields-by\"><a name=\"accessible-fields-by\" class=\"h-link\" href=\"#\"></a>accessibleFieldsBy</h3>\n<p><code>accessibleFieldsBy</code> is companion helper that allows to get only accessible fields for specific subject type of subject:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { accessibleFieldsBy } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/mongoose&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Post } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./models&#x27;</span>;\n\naccessibleFieldsBy(ability).ofType(<span class=\"hljs-string\">&#x27;Post&#x27;</span>) <span class=\"hljs-comment\">// returns accessible fields for Post model</span>\naccessibleFieldsBy(ability).ofType(Post) <span class=\"hljs-comment\">// also possible to pass class if classes are used for rule definition</span>\naccessibleFieldsBy(ability).of(<span class=\"hljs-keyword\">new</span> Post()) <span class=\"hljs-comment\">// returns accessible fields for Post model</span>\n</code></pre>\n<p>This helper is pre-configured to get all fields from <code>Model.schema.paths</code>, if this is not desired or you need to restrict public fields your app work with, you need to define your own custom helper:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { AnyMongoAbility, Generics } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@casl/ability&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { AccessibleFields, GetSubjectTypeAllFieldsExtractor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@casl/ability/extra&quot;</span>;\n<span class=\"hljs-keyword\">import</span> mongoose <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;mongoose&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> getSubjectTypeAllFieldsExtractor: GetSubjectTypeAllFieldsExtractor = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-keyword\">type</span></span>) =&gt;</span> {\n  <span class=\"hljs-comment\">/** custom implementation of returning all fields */</span>\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">accessibleFieldsBy</span>&lt;<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">extends</span> <span class=\"hljs-title\">AnyMongoAbility</span>&gt;(<span class=\"hljs-params\">\n  ability: T,\n  action: Parameters&lt;T[<span class=\"hljs-string\">&#x27;rulesFor&#x27;</span>]&gt;[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&#x27;read&#x27;</span>\n</span>): <span class=\"hljs-title\">AccessibleFields</span>&lt;<span class=\"hljs-title\">Extract</span>&lt;<span class=\"hljs-title\">Generics</span>&lt;<span class=\"hljs-title\">T</span>&gt;[&#x27;<span class=\"hljs-title\">abilities</span>&#x27;], <span class=\"hljs-title\">unknown</span>[]&gt;[1]&gt; </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> AccessibleFields(ability, action, getSubjectTypeAllFieldsExtractor);\n}\n</code></pre>\n<h2 id=\"type-script-support-in-mongoose\"><a name=\"type-script-support-in-mongoose\" class=\"h-link\" href=\"#\"></a>TypeScript support in mongoose</h2>\n<p>The package is written in TypeScript, this makes it easier to work with plugins and <code>toMongoQuery</code> helper because IDE provides useful hints. Let's see it in action!</p>\n<p>Suppose we have <code>Post</code> entity which can be described as:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> mongoose <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;mongoose&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> Post <span class=\"hljs-keyword\">extends</span> mongoose.Document {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">published</span>: <span class=\"hljs-built_in\">boolean</span>\n}\n\n<span class=\"hljs-keyword\">const</span> PostSchema = <span class=\"hljs-keyword\">new</span> mongoose.Schema&lt;Post&gt;({\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">String</span>,\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">String</span>,\n  <span class=\"hljs-attr\">published</span>: <span class=\"hljs-built_in\">Boolean</span>\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> Post = mongoose.model(<span class=\"hljs-string\">&#x27;Post&#x27;</span>, PostSchema);\n</code></pre>\n<p>To extend <code>Post</code> model with <code>accessibleBy</code> method it's enough to include the corresponding plugin (either globally or locally in <code>Post</code>) and use corresponding <code>Model</code> type. So, let's change the example, so it includes <code>accessibleRecordsPlugin</code>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { accessibleRecordsPlugin, AccessibleRecordModel } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/mongoose&#x27;</span>;\n\n<span class=\"hljs-comment\">// all previous code, except last line</span>\n\nPostSchema.plugin(accessibleRecordsPlugin);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> Post = mongoose.model&lt;Post, AccessibleRecordModel&lt;Post&gt;&gt;(<span class=\"hljs-string\">&#x27;Post&#x27;</span>, PostSchema);\n\n<span class=\"hljs-comment\">// Now we can safely use `Post.accessibleBy` method.</span>\nPost.accessibleBy(<span class=\"hljs-comment\">/* parameters */</span>)\nPost.where(<span class=\"hljs-comment\">/* parameters */</span>).accessibleBy(<span class=\"hljs-comment\">/* parameters */</span>);\n</code></pre>\n<p>In the similar manner, we can include <code>accessibleFieldsPlugin</code>, using <code>AccessibleFieldsModel</code> and <code>AccessibleFieldsDocument</code> types:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> {\n  accessibleFieldsPlugin,\n  AccessibleFieldsModel,\n  AccessibleFieldsDocument\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/mongoose&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> mongoose <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;mongoose&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> Post <span class=\"hljs-keyword\">extends</span> AccessibleFieldsDocument {\n  <span class=\"hljs-comment\">// the same Post definition from previous example</span>\n}\n\n<span class=\"hljs-keyword\">const</span> PostSchema = <span class=\"hljs-keyword\">new</span> mongoose.Schema&lt;Post&gt;({\n  <span class=\"hljs-comment\">// the same Post schema definition from previous example</span>\n})\n\nPostSchema.plugin(accessibleFieldsPlugin);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> Post = mongoose.model&lt;Post, AccessibleFieldsModel&lt;Post&gt;&gt;(<span class=\"hljs-string\">&#x27;Post&#x27;</span>, PostSchema);\n\n<span class=\"hljs-comment\">// Now we can safely use `Post.accessibleFieldsBy` method and `post.accessibleFieldsBy`</span>\nPost.accessibleFieldsBy(<span class=\"hljs-comment\">/* parameters */</span>);\n<span class=\"hljs-keyword\">const</span> post = <span class=\"hljs-keyword\">new</span> Post();\npost.accessibleFieldsBy(<span class=\"hljs-comment\">/* parameters */</span>);\n</code></pre>\n<p>And if we want to include both plugins, we can use <code>AccessibleModel</code> type that provides methods from both plugins:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> {\n  accessibleFieldsPlugin,\n  accessibleRecordsPlugin,\n  AccessibleModel,\n  AccessibleFieldsDocument\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/mongoose&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> mongoose <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;mongoose&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> Post <span class=\"hljs-keyword\">extends</span> AccessibleFieldsDocument {\n  <span class=\"hljs-comment\">// the same Post definition from previous example</span>\n}\n\n<span class=\"hljs-keyword\">const</span> PostSchema = <span class=\"hljs-keyword\">new</span> mongoose.Schema&lt;Post&gt;({\n  <span class=\"hljs-comment\">// the same Post schema definition from previous example</span>\n});\nPostSchema.plugin(accessibleFieldsPlugin);\nPostSchema.plugin(accessibleRecordsPlugin);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> Post = mongoose.model&lt;Post, AccessibleModel&lt;Post&gt;&gt;(<span class=\"hljs-string\">&#x27;Post&#x27;</span>, PostSchema);\n</code></pre>\n<p>This allows us to use the both <code>accessibleBy</code> and <code>accessibleFieldsBy</code> methods safely.</p>\n<h2 id=\"want-to-help\"><a name=\"want-to-help\" class=\"h-link\" href=\"#\"></a>Want to help?</h2>\n<p>Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on guidelines for <a href=\"https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener nofollow\">contributing</a>.</p>\n<p>If you'd like to help us sustain our community and project, consider <a href=\"https://opencollective.com/casljs/contribute\" target=\"_blank\" rel=\"noopener nofollow\">to become a financial contributor on Open Collective</a></p>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/support-casljs\" target=\"_blank\" rel=\"noopener nofollow\">Support CASL</a> for details</p>\n</blockquote>\n<h2 id=\"license\"><a name=\"license\" class=\"h-link\" href=\"#\"></a>License</h2>\n<p><a href=\"http://www.opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener nofollow\">MIT License</a></p>","headings":[{"id":"casl-mongoose","title":"CASL Mongoose"},{"id":"installation","title":"Installation"},{"id":"usage","title":"Usage"},{"id":"accessible-by-helper","title":"accessibleBy  helper"},{"id":"mongo-db-adapter","title":"MongoDB adapter"},{"id":"mongoose","title":"Mongoose"},{"id":"accessible-records-plugin","title":"Accessible Records plugin"},{"id":"accessible-fields-plugin","title":"Accessible Fields plugin"},{"id":"accessible-fields-by","title":"accessibleFieldsBy"},{"id":"type-script-support-in-mongoose","title":"TypeScript support in mongoose"},{"id":"want-to-help","title":"Want to help?"},{"id":"license","title":"License"}],"id":"package/casl-mongoose"}