{"title":"CASL Angular","categories":["package"],"order":115,"meta":{"keywords":null,"description":null},"content":"<h1 id=\"casl-angular\"><a name=\"casl-angular\" class=\"h-link\" href=\"#\"></a>CASL Angular</h1>\n<p><a href=\"https://badge.fury.io/js/%40casl%2Fangular\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badge.fury.io/js/%40casl%2Fangular.svg\" alt=\"@casl/angular NPM version\"></a>\n<a href=\"https://www.npmjs.com/package/%40casl%2Fangular\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://img.shields.io/npm/dm/%40casl%2Fangular.svg\" alt=\"\"></a>\n<a href=\"https://gitter.im/stalniy-casl/casl\" target=\"_blank\" rel=\"noopener nofollow\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"CASL Join the chat\"></a></p>\n<p>This package allows to integrate <code>@casl/ability</code> with <a href=\"https://angular.io/\" target=\"_blank\" rel=\"noopener nofollow\">Angular</a> application. It provides <code>AblePipe</code> and <code>AblePurePipe</code> to Angular templates, so you can show or hide components, buttons, etc based on user ability to see them.</p>\n<h2 id=\"installation\"><a name=\"installation\" class=\"h-link\" href=\"#\"></a>Installation</h2>\n<pre><code class=\"hljs language-sh\">npm install @casl/angular @casl/ability\n<span class=\"hljs-comment\"># or</span>\nyarn add @casl/angular @casl/ability\n<span class=\"hljs-comment\"># or</span>\npnpm add @casl/angular @casl/ability\n</code></pre>\n<h2 id=\"configure-app-module\"><a name=\"configure-app-module\" class=\"h-link\" href=\"#\"></a>Configure AppModule</h2>\n<p>To add pipes into your application's templates, you need to import <code>AbilityModule</code> in your <code>AppModule</code> and</p>\n<pre><code data-filename=\"app.module.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { NgModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AbilityModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/angular&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Ability, PureAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-meta\">@NgModule</span>({\n  <span class=\"hljs-attr\">imports</span>: [\n    <span class=\"hljs-comment\">// other modules</span>\n    AbilityModule\n  ],\n  <span class=\"hljs-attr\">providers</span>: [\n    { <span class=\"hljs-attr\">provide</span>: Ability, <span class=\"hljs-attr\">useValue</span>: <span class=\"hljs-keyword\">new</span> Ability() },\n    { <span class=\"hljs-attr\">provide</span>: PureAbility, <span class=\"hljs-attr\">useExisting</span>: Ability }\n  ]\n  <span class=\"hljs-comment\">// other properties</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>{}\n</code></pre>\n<p>The 2nd provider provides instance of <code>PureAbility</code>, so pipes can inject it later. This pipes inject <code>PureAbility</code> (not <code>Ability</code>) because this allows an application developer to decide how to configure actions, subjects and conditions. Also this is the only way to get maximum from tree shaking (e.g., if you don't need conditions you can use <code>PureAbility</code> and shrink @casl/ability size).</p>\n<blockquote>\n<p>Read <a href=\"https://casl.js.org/v5/en/advanced/typescript\" target=\"_blank\" rel=\"noopener nofollow\">CASL and TypeScript</a> to get more details about <code>Ability</code> type configuration.</p>\n</blockquote>\n<h2 id=\"update-ability-instance\"><a name=\"update-ability-instance\" class=\"h-link\" href=\"#\"></a>Update Ability instance</h2>\n<p>Majority of applications that need permission checking support have something like <code>AuthService</code> or <code>LoginService</code> or <code>Session</code> service (name it as you wish) which is responsible for user login/logout functionality. Whenever user login (and logout), we need to update <code>Ability</code> instance with new rules.</p>\n<p>Let's imagine that server returns user with a role on login:</p>\n<pre><code data-filename=\"Session.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, AbilityBuilder } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Injectable } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n\n<span class=\"hljs-meta\">@Injectable</span>({ <span class=\"hljs-attr\">provideIn</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span> })\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Session</span> </span>{\n  <span class=\"hljs-keyword\">private</span> token: <span class=\"hljs-built_in\">string</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> ability: Ability</span>)</span> {}\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">login</span>(<span class=\"hljs-params\">details</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> params = { <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>, <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify(details) };\n    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">&#x27;path/to/api/login&#x27;</span>, params)\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> response.json())\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">session</span>) =&gt;</span> {\n        <span class=\"hljs-built_in\">this</span>.updateAbility(session.user);\n        <span class=\"hljs-built_in\">this</span>.token = session.token;\n      });\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-title\">updateAbility</span>(<span class=\"hljs-params\">user</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> { can, rules } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(Ability);\n\n    <span class=\"hljs-keyword\">if</span> (user.role === <span class=\"hljs-string\">&#x27;admin&#x27;</span>) {\n      can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n    }\n\n    <span class=\"hljs-built_in\">this</span>.ability.update(rules);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">logout</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.token = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-built_in\">this</span>.ability.update([]);\n  }\n}\n</code></pre>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/guide/define-rules\" target=\"_blank\" rel=\"noopener nofollow\">Define rules</a> to get more information of how to define <code>Ability</code></p>\n</blockquote>\n<p>Then use this <code>Session</code> service in <code>LoginComponent</code>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Session } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../services/Session&#x27;</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;login-form&#x27;</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n    &lt;form (ngSubmit)=&quot;login()&quot;&gt;\n      &lt;input type=&quot;email&quot; [(ngModel)]=&quot;email&quot; /&gt;\n      &lt;input type=&quot;password&quot; [(ngModel)]=&quot;password&quot; /&gt;\n      &lt;button type=&quot;submit&quot;&gt;Login&lt;/button&gt;\n    &lt;/form&gt;\n  `</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginForm</span> </span>{\n  <span class=\"hljs-attr\">email</span>: <span class=\"hljs-built_in\">string</span>;\n  password: <span class=\"hljs-built_in\">string</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> session: Session</span>)</span> {}\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">login</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> { email, password } = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.session.login({ email, password });\n  }\n}\n</code></pre>\n<h2 id=\"check-permissions-in-templates-using-ability-service\"><a name=\"check-permissions-in-templates-using-ability-service\" class=\"h-link\" href=\"#\"></a>Check permissions in templates using AbilityService</h2>\n<p><code>AbilityService</code> is a service that provides <code>ability$</code> observable. This observable injects provided in DI <code>PureAbility</code> instance and emits it each time its rules are changed. This allows efficiently use permissions checks, especially in case we use <code>ChangeDetectionStrategy.OnPush</code>.</p>\n<p>Let's first see how it can be used in any component:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;my-home&#x27;</span>,\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`\n    &lt;ng-container *ngIf=&quot;ability$ | async as ability&quot;&gt;\n      &lt;h1&gt;Home Page&lt;/h1&gt;\n      &lt;button *ngIf=&quot;ability.can(&#x27;create&#x27;, &#x27;Post&#x27;)&quot;&gt;Create Post&lt;/button&gt;\n    &lt;/ng-container&gt;\n  `</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HomeComponent</span> </span>{\n  <span class=\"hljs-keyword\">readonly</span> ability$: Observable&lt;AppAbility&gt;;\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">abilityService: AbilityService&lt;AppAbility&gt;</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.ability$ = abilityService.ability$;\n  }\n}\n</code></pre>\n<p>It also can be safely used inside <code>*ngFor</code> and other directives. If we use <code>ChangeDetectionStrategy.OnPush</code>, it will give us additional performance improvements because <code>ability.can(...)</code> won't be called without a need.</p>\n<p>This approach works good from performance point of view because it creates only single subscription per component (not per check as in case of <code>ablePure</code> pipe) and doesn't require our component to use <code>Default</code> or <code>OnPush</code> strategy.</p>\n<p><strong>Note</strong>: provide this service at root injector level as we need only 1 instance of it.</p>\n<p>But let's also see how we can do permission checks using pipes and what are performance implications of that:</p>\n<h2 id=\"check-permissions-in-templates-using-pipe\"><a name=\"check-permissions-in-templates-using-pipe\" class=\"h-link\" href=\"#\"></a>Check permissions in templates using pipe</h2>\n<p>To check permissions in any template you can use <code>AblePipe</code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">&quot;&#x27;create&#x27; | able: &#x27;Post&#x27;&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> (<span class=\"hljs-attr\">click</span>)=<span class=\"hljs-string\">&quot;createPost()&quot;</span>&gt;</span>Add Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<h3 id=\"why-pipe-and-not-directive\"><a name=\"why-pipe-and-not-directive\" class=\"h-link\" href=\"#\"></a>Why pipe and not directive?</h3>\n<p>Directive cannot be used to pass values into inputs of other components. For example, we need to enable or disable a button based on user's ability to create a post. With directive we cannot do this but we can do this with pipe:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> [<span class=\"hljs-attr\">disabled</span>]=<span class=\"hljs-string\">&quot;!(&#x27;create&#x27; | able: &#x27;Post&#x27;)&quot;</span>&gt;</span>Add Post<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre>\n<h3 id=\"performance-considerations\"><a name=\"performance-considerations\" class=\"h-link\" href=\"#\"></a>Performance considerations</h3>\n<p>There are 2 pipes in <code>@casl/angular</code>:</p>\n<ul>\n<li><code>able</code> - impure pipe</li>\n<li><code>ablePure</code> - pure pipe</li>\n</ul>\n<p>So, when should we use which?</p>\n<blockquote>\n<p>If you are in doubt, then use <code>ablePure</code> for action and subject type checks, and <code>able</code> for all others</p>\n</blockquote>\n<p>According to Angular documentation pure pipes are called only if their arguments are changed. This means that you <strong>can't use mutable objects with pure pipes</strong> because changes in that objects don't trigger pure pipe re-evaluation. But a good thing is that Angular creates only single instance of a pure pipe for the whole app and reuses it across components, this way it safes component instantiation time and memory footprint.</p>\n<p>Due to <a href=\"https://github.com/angular/angular/issues/15041\" target=\"_blank\" rel=\"noopener nofollow\">open feature in Angular</a>, we need to pass the result of <code>ablePure</code> pipe to <code>async</code> pipe. So, instead of</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">&quot;&#x27;create&#x27; | ablePure: &#x27;Todo&#x27;&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p>we need to write:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">ngIf</span>=<span class=\"hljs-string\">&quot;&#x27;create&#x27; | ablePure: &#x27;Todo&#x27; | async&quot;</span>&gt;</span>...<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<blockquote>\n<p><code>ablePure</code> pipe returns an <code>Observable&lt;boolean&gt;</code>, so <code>async</code> pipe can effectively unwrap it</p>\n</blockquote>\n<p>For apps that mutate application state, we need to use impure <code>able</code> pipe as it can detect changes in object properties. Don't worry, checks by action and subject type are very fast and are done in O(1) time. The performance of checks by action and subject object are a bit slower and depend on the amount of rules for a particular subject type and used conditions but usually this won't become a bottle neck for the app.</p>\n<h2 id=\"type-script-support\"><a name=\"type-script-support\" class=\"h-link\" href=\"#\"></a>TypeScript support</h2>\n<p>This package is written in TypeScript, so it will warn you about wrong usage.</p>\n<p>It may be a bit tedious to use application specific abilities in Angular app because everywhere you inject <code>Ability</code> instance you will need to import its generic parameters:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AppAbilities } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../services/AppAbility&#x27;</span>;\n\n<span class=\"hljs-meta\">@Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">&#x27;todo-item&#x27;</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TodoItem</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">\n    <span class=\"hljs-keyword\">private</span> ability: Ability&lt;AppAbilities&gt;\n  </span>)</span> {}\n}\n</code></pre>\n<p>To make the life easier, you can use <code>AbilityClass&lt;TAbility&gt;</code> class to utilize Companion object pattern:</p>\n<pre><code data-filename=\"AppAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, AbilityClass } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> Actions = <span class=\"hljs-string\">&#x27;create&#x27;</span> | <span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span> | <span class=\"hljs-string\">&#x27;delete&#x27;</span>;\n<span class=\"hljs-keyword\">type</span> Subjects = <span class=\"hljs-string\">&#x27;Article&#x27;</span> | <span class=\"hljs-string\">&#x27;User&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> AppAbility = Ability&lt;[Actions, Subjects]&gt;;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> AppAbility = Ability <span class=\"hljs-keyword\">as</span> AbilityClass&lt;AppAbility&gt;;\n</code></pre>\n<p>And use <code>AppAbility</code> everywhere in your app:</p>\n<pre><code data-filename=\"AppModule.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { NgModule } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@angular/core&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AppAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/AppAbility&#x27;</span>;\n\n<span class=\"hljs-meta\">@NgModule</span>({\n  <span class=\"hljs-comment\">// other configuration</span>\n  <span class=\"hljs-attr\">providers</span>: [\n    { <span class=\"hljs-attr\">provide</span>: AppAbility, <span class=\"hljs-attr\">useValue</span>: <span class=\"hljs-keyword\">new</span> AppAbility() },\n    { <span class=\"hljs-attr\">provide</span>: PureAbility, <span class=\"hljs-attr\">useExisting</span>: AppAbility },\n  ]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppModule</span> </span>{}\n</code></pre>\n<h2 id=\"want-to-help\"><a name=\"want-to-help\" class=\"h-link\" href=\"#\"></a>Want to help?</h2>\n<p>Want to file a bug, contribute some code, or improve documentation? Excellent! Read up on guidelines for <a href=\"https://github.com/stalniy/casl/blob/master/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener nofollow\">contributing</a>.</p>\n<p>If you'd like to help us sustain our community and project, consider <a href=\"https://opencollective.com/casljs/contribute\" target=\"_blank\" rel=\"noopener nofollow\">to become a financial contributor on Open Collective</a></p>\n<blockquote>\n<p>See <a href=\"https://casl.js.org/v5/en/support-casljs\" target=\"_blank\" rel=\"noopener nofollow\">Support CASL</a> for details</p>\n</blockquote>\n<h2 id=\"license\"><a name=\"license\" class=\"h-link\" href=\"#\"></a>License</h2>\n<p><a href=\"http://www.opensource.org/licenses/MIT\" target=\"_blank\" rel=\"noopener nofollow\">MIT License</a></p>","headings":[{"id":"casl-angular","title":"CASL Angular"},{"id":"installation","title":"Installation"},{"id":"configure-app-module","title":"Configure AppModule"},{"id":"update-ability-instance","title":"Update Ability instance"},{"id":"check-permissions-in-templates-using-ability-service","title":"Check permissions in templates using AbilityService"},{"id":"check-permissions-in-templates-using-pipe","title":"Check permissions in templates using pipe"},{"id":"why-pipe-and-not-directive","title":"Why pipe and not directive?"},{"id":"performance-considerations","title":"Performance considerations"},{"id":"type-script-support","title":"TypeScript support"},{"id":"want-to-help","title":"Want to help?"},{"id":"license","title":"License"}],"id":"package/casl-angular"}